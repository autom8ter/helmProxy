syntax = "proto3";

package meshpaas;

option go_package = "meshpaaspb";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

enum Protocol {
  INVALID_PROTOCOL =0;
  HTTP =1;
  HTTPS =2;
  GRPC =3;
  HTTP2 =4;
  MONGO =5;
  TCP =6;
  TLS =7;
}

enum TLSmode {
  PASSTHROUGH = 0;
  SIMPLE = 1;
  MUTUAL = 2;
  AUTO_PASSTHROUGH = 3;
  ISTIO_MUTUAL = 4;
};

message ServerTLSSettings {
  bool https_redirect = 1;
  TLSmode mode = 2;
  string server_certificate = 3;
  string private_key = 4;
  string ca_certificates = 5;
  string credential_name = 10;
  repeated string subject_alt_names = 6;
  repeated string verify_certificate_spki = 11;
  repeated string verify_certificate_hash = 12;
  repeated string cipher_suites = 9;
}

message GatewayListener {
  uint32 port =1[(validator.field) = {int_gt : 0}];
  string name =2[(validator.field) = {regex : "^.{1,225}$"}];
  Protocol protocol =3[(validator.field) = {int_gt : 0}];
  repeated string hosts =4[(validator.field) = {repeated_count_min : 0}];
  ServerTLSSettings tls_config =5;
}

message Gateway {
  // name of the application
  string name =1;
  // application namespace
  string namespace =2;
  repeated GatewayListener listeners = 3;
  map<string, string> labels =4;
  map<string, string> selector =5;
}

message GatewayInput {
  // name of the application
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // application namespace
  string namespace =2[(validator.field) = {regex : "^.{1,225}$"}];
  repeated GatewayListener listeners = 3;
  map<string, string> labels =4[(validator.field) = {msg_exists : true}];
  map<string, string> selector =5[(validator.field) = {msg_exists : true}];
}

// HTTPRoute is a single http route(istio HttpRoute)
message HTTPRoute {
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  uint32 port =2[(validator.field) = {int_gt : 0}];
  string path_prefix =3;
  string rewrite_uri = 4;
  // The list of origins that are allowed to perform CORS requests
  repeated string allow_origins =5;
  // The list of methods that are allowed to perform CORS requests
  repeated string allow_methods =6;
  // The list of headers that are allowed to perform CORS requests
  repeated string allow_headers =7;
  // The list of origins that are allowed to perform CORS requests
  repeated string expose_headers =8;
  // adds `Access-Control-Allow-Credentials` header
  bool allow_credentials =9;
}

message Networking {
  repeated string gateways =1;
  repeated string hosts =2;
  bool export =3;
  repeated HTTPRoute http_routes =4;
}

// App is a stateless application
message App {
  // name of the application
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // application namespace
  string namespace =2[(validator.field) = {regex : "^.{1,225}$"}];
  // docker image of application
  string image =3[(validator.field) = {regex : "^.{1,225}$"}];
  // args are arguments given to the docker image at startup
  repeated string args =5;
  // k/v map of environmental variables
  map<string, string> env =6;
  // k/v map of ports to expose ex: http: 80 https: 443
  map<string, uint32> ports =7[(validator.field) = {msg_exists : true}];
  // number of deployment replicas
  uint32 replicas =8;
  map<string, string> labels =9[(validator.field) = {msg_exists : true}];
  map<string, string> selector =10[(validator.field) = {msg_exists : true}];
  // gateway/service-mesh networking
  Networking networking =11[(validator.field) = {msg_exists : true}];
  // status tracks the state of the application during it's lifecycle
  AppStatus status =20[(validator.field) = {msg_exists : true}];
}


// Task is scheduled cron job
message Task {
  // name of the task
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // task namespace
  string namespace =2[(validator.field) = {regex : "^.{1,225}$"}];
  // docker image of task
  string image =3[(validator.field) = {regex : "^.{1,225}$"}];
  // args are arguments given to docker image at startup
  repeated string args =5;
  // k/v map of environmental variables
  map<string, string> env =6;
  // schedule is the cron schedule: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
  string schedule = 7[(validator.field) = {regex : "^.{1,225}$"}];
  // completions is the number of times to execute the task. If completions = 0, the task will run forever
  uint32 completions = 8;
  map<string, string> labels =9[(validator.field) = {msg_exists : true}];
  map<string, string> selector =10[(validator.field) = {msg_exists : true}];
}

// TaskInput creates/updates a task(cron job)
message TaskInput {
  // name of the task
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // task namespace
  string namespace =2[(validator.field) = {regex : "^.{1,225}$"}];
  // docker image of task
  string image =3[(validator.field) = {regex : "^.{1,225}$"}];
  // args are arguments given to docker image at startup
  repeated string args =5;
  // k/v map of environmental variables
  map<string, string> env =6;
  // schedule is the cron schedule: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
  string schedule = 7[(validator.field) = {regex : "^.{1,225}$"}];
  // completions is the number of times to execute the task. If completions = 0, the task will run forever
  uint32 completions = 8;
  map<string, string> labels =9[(validator.field) = {msg_exists : true}];
  map<string, string> selector =10[(validator.field) = {msg_exists : true}];
}

// AppInput creates/replaces an app
message AppInput {
  // name of the application
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // application namespace
  string namespace =2[(validator.field) = {regex : "^.{1,225}$"}];
  // docker image of application
  string image =3[(validator.field) = {regex : "^.{1,225}$"}];
  // args are arguments given to the docker image at startup
  repeated string args =4;
  // k/v map of environmental variables
  map<string, string> env =5;
  // k/v map of ports to expose ex: http: 80 https: 443
  map<string, uint32> ports =6[(validator.field) = {msg_exists : true}];
  // number of deployment replicas
  uint32 replicas =7;
  Networking networking =9[(validator.field) = {msg_exists : true}];
  map<string, string> labels =10[(validator.field) = {msg_exists : true}];
  map<string, string> selector =11[(validator.field) = {msg_exists : true}];
}

message Ref {
  // name of the application
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // application namespace
  string namespace =2[(validator.field) = {regex : "^.{1,225}$"}];
}
//repeated_count_min

message Replica {
  string phase =1;
  string condition =2;
  string reason =3;
}

message AppStatus {
  repeated Replica replicas =1;
}

message Log {
  string message =1;
}

message Apps {
  repeated App applications =1;
}

message Tasks {
  repeated Task tasks =1;
}

message Namespace {
  string namespace =1;
}

message Namespaces {
  repeated string namespaces =1;
}


//
service KdeployService {
  // CreateApp creates a new stateless application(k8s deployment & service) within a single namespace(k8s namespace)
  // the namespace will automatically be created if one does not already exist
  rpc CreateApp(AppInput) returns(App){}
  // UpdateApp edits/patches an existing stateless application(k8s deployment & service) within an existing namespace(k8s namespace)
  rpc UpdateApp(AppInput) returns(App){}
  // DeleteApp deletes a single stateless application(k8s deployment & service) within an existing namespace
  rpc DeleteApp(Ref) returns(google.protobuf.Empty){}
  // GetApp gets an app by name within an existing namespace
  rpc GetApp(Ref) returns(App){}
  // ListApps lists all apps within an existing namespace
  rpc ListApps(Namespace) returns(Apps){}
  // ListNamespaces lists all namespaces created by meshpaas
  rpc ListNamespaces(google.protobuf.Empty) returns(Namespaces){}
  // DeleteAll deletes all apps/tasks within an existing namespace
  rpc DeleteAll(Namespace) returns(google.protobuf.Empty){}
  // CreateTask creates a new task(k8s cron job) within a single namespace(k8s namespace)
  // the namespace will automatically be created if one does not already exist
  rpc CreateTask(TaskInput) returns(Task){}
  // UpdateTask edits/patches an existing task(k8s cron job) within an existing namespace(k8s namespace)
  rpc UpdateTask(TaskInput) returns(Task){}
  // DeleteTask deletes a single task(k8s cron job) within an existing namespace
  rpc DeleteTask(Ref) returns(google.protobuf.Empty){}
  // GetTask gets a task(k8s cron job) by name within an existing namespace
  rpc GetTask(Ref) returns(Task){}
  // ListTasks lists all tasks(k8s cron jobs) within an existing namespace
  rpc ListTasks(Namespace) returns(Tasks){}
  // StreamLogs streams logs from an app/task within an existing namespace.
  // Streams are opened to all replicas & converted into a single stream
  rpc StreamLogs(Ref) returns (stream Log){}

  rpc CreateGateway(GatewayInput) returns(Gateway){}
  rpc UpdateGateway(GatewayInput) returns(Gateway){}
  rpc DeleteGateway(Ref) returns(google.protobuf.Empty){}
  rpc GetGateway(Ref) returns(Gateway){}
}