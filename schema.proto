syntax = "proto3";

package meshpaas;

option go_package = "meshpaaspb";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// AuthnRule is an authentication rule
message AuthnRule {
  // json web keys uri ref: https://tools.ietf.org/html/rfc7517
  string jwks_uri =1[(validator.field) = {regex : "^.{1,225}$"}];
  // issuer jwt claim ref: https://tools.ietf.org/html/rfc7519#section-4.1.1
  string issuer =2[(validator.field) = {regex : "^.{1,225}$"}];
  // issuer jwt claim ref: https://tools.ietf.org/html/rfc7519#section-4.1.1
  repeated string audience =3;
}

// Authn holds authentication options for an application
message Authn {
  repeated AuthnRule rules =1[(validator.field) = {repeated_count_min : 1}];
}

// SecretType is a classification of secret
enum SecretType {
  OPAQUE =0;
  TLS_CERT_KEY =1;
  DOCKER_CONFIG =2;
}

// SecretInput creates/replaces a secret
message SecretInput {
  // name of the secret
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  SecretType type =3;
  // prevent changes to the secret after it is created
  bool immutable =4;
  // k/v map of base64 encoded data
  map<string, string> data =5[(validator.field) = {msg_exists : true}];
}

// Secret is a secret/credential used by various components of the service mesh
message Secret {
  // name of the secret
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  SecretType type =3;
  // prevent changes to the secret after it is created
  bool immutable =4;
  // k/v map of base64 encoded data
  map<string, string> data =5[(validator.field) = {msg_exists : true}];
}

enum TransportProtocol {
  INVALID_PROTOCOL =0;
  HTTP =1;
  HTTPS =2;
  GRPC =3;
  HTTP2 =4;
  MONGO =5;
  TCP =6;
  TLS =7;
}

enum TLSmode {
  // no termination
  PASSTHROUGH = 0;
  // tls termination
  SIMPLE = 1;
  // mutual tls
  MUTUAL = 2;
  AUTO_PASSTHROUGH = 3;
  ISTIO_MUTUAL = 4;
};

// ServerTLSSettings provides tls/ssl encryption options
message ServerTLSSettings {
  // automatically redirect http -> https
  bool https_redirect = 1;
  // tls mode
  TLSmode mode = 2;
  // secret where tls credentials are stored
  string secret_name = 3;
  repeated string subject_alt_names = 4;
  repeated string verify_certificate_spki = 5;
  repeated string verify_certificate_hash = 6;
  repeated string cipher_suites = 7;
}

// GatewayListener is a single, public tcp listener served by a gateway
message GatewayListener {
  // port the gateway listener will listen on ex: 80
  uint32 port =1[(validator.field) = {int_gt : 0}];
  // name of the gateway listener ex: http
  string name =2[(validator.field) = {regex : "^.{1,225}$"}];
  // protocol describes the transport protocol served by this listener
  TransportProtocol protocol =3[(validator.field) = {int_gt : 0}];
  // hosts describes hostnames that may route to this listener
  repeated string hosts =4[(validator.field) = {repeated_count_min : 1}];
  // tls_config provides tls/ssl encryption options
  ServerTLSSettings tls_config =5;
}

message Gateway {
  // name of the gateway
  string name =1;
  repeated GatewayListener listeners = 3;
}

message GatewayInput {
  // name of the gateway
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  repeated GatewayListener listeners = 3;
}

// HTTPRoute is a single http route(istio HttpRoute)
message HTTPRoute {
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  uint32 port =2[(validator.field) = {int_gt : 0}];
  string path_prefix =3;
  string rewrite_uri = 5;
  // The list of origins that are allowed to perform CORS requests
  repeated string allow_origins =6;
  // The list of methods that are allowed to perform CORS requests
  repeated string allow_methods =7;
  // The list of headers that are allowed to perform CORS requests
  repeated string allow_headers =8;
  // The list of origins that are allowed to perform CORS requests
  repeated string expose_headers =9;
  // adds `Access-Control-Allow-Credentials` header
  bool allow_credentials =10;
}

// Routing describes service mesh routing options(gateway/host bindings, route rewrites, etc) for an Application
message Routing {
  // gateway to bind to
  string gateway =1;
  // host names to bind to
  repeated string hosts =2;
  // http route matchers/configurations
  repeated HTTPRoute http_routes =4;
}

// Container is a single docker container
message Container {
  // name of the container
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // docker image of container
  string image =2[(validator.field) = {regex : "^.{1,225}$"}];
  // args are arguments given to the docker image at startup
  repeated string args =3;
  // k/v map of environmental variables
  map<string, string> env =4;
  // list of ports
  repeated ContainerPort ports =5;
}

// App is a stateless application
message App {
  // name of the application
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // containers are docker containers that run the application's business logic
  repeated Container containers =3 [(validator.field) = {repeated_count_min : 1}];
  // number of deployment replicas
  uint32 replicas =8;
  // gateway/service-mesh routing
  Routing routing =11[(validator.field) = {msg_exists : true}];
  // application authentication options
  Authn authentication =12[(validator.field) = {msg_exists : true}];
  // image_pull_secret is the secret used to pull images from docker registry
  string image_pull_secret =14;
  // status tracks the state of the application during it's lifecycle
  AppStatus status =20[(validator.field) = {msg_exists : true}];
}


// Task is scheduled cron job
message Task {
  // name of the task
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // image_pull_secret is the secret used to pull images from docker registry
  string image_pull_secret =3;
  // containers are docker containers that run the task's business logic
  repeated Container containers =4 [(validator.field) = {repeated_count_min : 1}];
  // schedule is the cron schedule: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
  string schedule = 7[(validator.field) = {regex : "^.{1,225}$"}];
  // completions is the number of times to execute the task. If completions = 0, the task will run forever
  uint32 completions = 8;
}

// TaskInput creates/updates a task(cron job)
message TaskInput {
  // name of the task
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // image_pull_secret is the secret used to pull images from docker registry
  string image_pull_secret =3;
  // containers are docker containers that run the task's business logic
  repeated Container containers =4 [(validator.field) = {repeated_count_min : 1}];
  // schedule is the cron schedule: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
  string schedule = 7[(validator.field) = {regex : "^.{1,225}$"}];
  // completions is the number of times to execute the task. If completions = 0, the task will run forever
  uint32 completions = 8;
}

message ContainerPort {
  // port name
  string name = 1;
  // port number
  uint32 number =2;
  // expose to service mesh(outside of localhost)
  bool expose =3;
}

// AppInput creates/replaces an app
message AppInput {
  // name of the application
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // containers are docker containers that run the application's business logic
  repeated Container containers =3 [(validator.field) = {repeated_count_min : 1}];
  // number of deployment replicas
  uint32 replicas =7;
  // routing - routing options
  Routing routing =10[(validator.field) = {msg_exists : true}];
  // application authentication options
  Authn authentication =12;
  // image_pull_secret is the secret used to pull images from docker registry
  string image_pull_secret =14;
}

// Ref is a pointer to a resource
message Ref {
  // name of the resource
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
}

// Replica tracks the state/status of an individual replica of an application
message Replica {
  string phase =1;
  string condition =2;
  string reason =3;
}

// AppStatus tracks the status of an application
message AppStatus {
  repeated Replica replicas =1;
}

message Log {
  string message =1;
}

message Apps {
  repeated App applications =1;
}

message Tasks {
  repeated Task tasks =1;
}

// LogOpts holds options for fetching logs from Tasks & Applications
message LogOpts {
  // name is the name of the Application or Task
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // container is the container to stream from
  string container =2[(validator.field) = {regex : "^.{1,225}$"}];
  // since_seconds streams since a certain unix time(in the past)
  int64 since_seconds =3;
  // the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or since_seconds
  int64 tail_lines =4;
  // previous retrieves logs from the previous container than the one running(useful for restarts)
  bool previous =10;
  // if stream is true, the tcp connection will be left open & logs will continue to be sent to the client
  bool stream =11;
}

// MeshPaasService is a platform as a service backed by Istio service mesh
service MeshPaasService {
  // CreateApp creates a new stateless application(k8s deployment, istio virtual service, request authenticator, & authorization policy)
  rpc CreateApp(AppInput) returns(App){}
  // UpdateApp replaces an existing stateless application(k8s deployment, istio virtual service, request authenticator, & authorization policy)
  rpc UpdateApp(AppInput) returns(App){}
  // DeleteApp deletes a single stateless application(k8s deployment, istio virtual service, request authenticator, & authorization policy)
  rpc DeleteApp(Ref) returns(google.protobuf.Empty){}
  // GetApp gets an app by name
  rpc GetApp(Ref) returns(App){}
  // ListApps lists all apps
  rpc ListApps(google.protobuf.Empty) returns(Apps){}

  // CreateTask creates a new task(k8s cron job)
  rpc CreateTask(TaskInput) returns(Task){}
  // UpdateTask replaces an existing task(k8s cron job)
  rpc UpdateTask(TaskInput) returns(Task){}
  // DeleteTask deletes a single task(k8s cron job)
  rpc DeleteTask(Ref) returns(google.protobuf.Empty){}
  // GetTask gets a task(k8s cron job) by name
  rpc GetTask(Ref) returns(Task){}
  // ListTasks lists all tasks(k8s cron jobs)
  rpc ListTasks(google.protobuf.Empty) returns(Tasks){}

  // CreateGateway creates a new gateway(istio gateway)
  rpc CreateGateway(GatewayInput) returns(Gateway){}
  // UpdateGateway replaces an existing gateway(istio gateway)
  rpc UpdateGateway(GatewayInput) returns(Gateway){}
  // DeleteGateway deletes a single gateway(istio gateway)
  rpc DeleteGateway(Ref) returns(google.protobuf.Empty){}
  // GetGateway gets a gateway(istio gateway) by name
  rpc GetGateway(Ref) returns(Gateway){}

  // CreateSecret creates a new secret(k8s secret)
  rpc CreateSecret(SecretInput) returns(Secret){}
  // UpdateSecret replaces an existing secret(k8s secret)
  rpc UpdateSecret(SecretInput) returns(Secret){}
  // DeleteSecret deletes a single secret(k8s secret)
  rpc DeleteSecret(Ref) returns(google.protobuf.Empty){}
  // GetSecret gets a secret(k8s secret) by name
  rpc GetSecret(Ref) returns(Secret){}


  // StreamLogs streams logs from an app/task.
  // Streams are opened to all replicas & converted into a single stream
  rpc StreamLogs(LogOpts) returns (stream Log){}
}