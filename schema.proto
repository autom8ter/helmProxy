syntax = "proto3";

package meshpaas;

option go_package = "meshpaaspb";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// Dependency is a dependency(template) required by a template
message Dependency {
  // name of the template dependency
  string template_name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // name of the template version
  string version =2[(validator.field) = {regex : "^.{1,225}$"}];
  string repository =3[(validator.field) = {regex : "^.{1,225}$"}];
}

// Maintainer is the maintainer of a 
message Maintainer {
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  string email =2[(validator.field) = {regex : "^.{1,225}$"}];
}

// Filter is used for filtering search results
message Filter {
  string term =1[(validator.field) = {regex : "^.{1,225}$"}];
  bool regex =2;
}

// AppTemplate is a template of an application
message AppTemplate {
  // name of the app template
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // home page of the app template
  string home =2;
  // description of the app template
  string description =3;
  // version of the app template
  string version =4;
  repeated string sources =5;
  // keywords associated with the app template
  repeated string keywords =6;
  string icon =7;
  bool deprecated =8;
  repeated Dependency dependencies =9;
  repeated Maintainer maintainers =10;
  map<string, string> metadata =11;
}

// AppTemplates is a list of app templates
message AppTemplates {
  repeated AppTemplate templates =1;
}

// App is an App created from an AppTemplate
message App {
  // name of the application
  string name =1[(validator.field) = {regex : "^.{1,225}$"}];
  // project name the app belongs to(autocreated)
  string project =2[(validator.field) = {regex : "^.{1,225}$"}];
  // version of the App. Iterates with each upgrade
  uint32 version =3;
  // config values
  google.protobuf.Struct config =4;
  LifeCycle life_cycle =5;
  AppTemplate template =20;
}

// Apps is a list of apps
message Apps {
  repeated App apps =1;
}

// LifeCycle tracks the state of an app during it's lifecycle
message LifeCycle {
  string notes =1;
  string description =2;
  string status =3;
  map<string, google.protobuf.Timestamp> timestamps =4;
}

// AppRef is a generic structure for looking up apps
message AppRef {
  // project name the app belongs to(autocreated)
  string project =1[(validator.field) = {regex : "^.{1,225}$"}];
  string name =2[(validator.field) = {regex : "^.{1,225}$"}];
}

// AppInput is used to create/update an app
message AppInput {
  // project name the app belongs to(autocreated)
  string project =1[(validator.field) = {regex : "^.{1,225}$"}];
  // the app template to use
  string template_name =2[(validator.field) = {regex : "^.{1,225}$"}];
  // name of the app
  string app_name =3[(validator.field) = {regex : "^.{1,225}$"}];
  // config values used to render the app template
  map<string, string> config =4[(validator.field) = {msg_exists : true}];
}

// ProjectRef is a generic structure for looking up projects
message ProjectRef {
  // name of the project
  string name =1;
}

// ProjectRefs is a list of ProjectRef
message ProjectRefs {
  repeated ProjectRef projects =1;
}

// MeshPaasService is a platform as a service backed by Istio service mesh
// all requests are made in the context of the user's identity which is derived from the inbound jwt & verified with the configured jwks(json web keys) uri
service MeshPaasService {
  // returns a list of all of the projects
  rpc ListProjects(google.protobuf.Empty) returns(ProjectRefs){}
  // GetApp gets an app in the given project
  rpc GetApp(AppRef) returns(App){}
  // ListApps lists apps in the project
  rpc ListApps(ProjectRef) returns(Apps){}
  // UninstallApp uninstalls an app in the given project
  rpc UninstallApp(AppRef) returns(google.protobuf.Empty){}
  // RollbackApp rolls the app back to the previous version in the given namespace
  rpc RollbackApp(AppRef) returns(App){}
  // CreateApp creates an app in the given project
  rpc CreateApp(AppInput) returns(App){}
  // UpdateApp updates an app in the given project
  rpc UpdateApp(AppInput) returns(App){}
  // SearchAppTemplates searches for an app template
  rpc SearchAppTemplates(Filter) returns(AppTemplates){}
}