// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: kdeploy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kdeploy {

  /// <summary>Holder for reflection information generated from kdeploy.proto</summary>
  public static partial class KdeployReflection {

    #region Descriptor
    /// <summary>File descriptor for kdeploy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KdeployReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1rZGVwbG95LnByb3RvEgdrZGVwbG95Ghxnb29nbGUvcHJvdG9idWYvc3Ry",
            "dWN0LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGhln",
            "b29nbGUvcHJvdG9idWYvYW55LnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1w",
            "dHkucHJvdG8aNmdpdGh1Yi5jb20vbXdpdGtvdy9nby1wcm90by12YWxpZGF0",
            "b3JzL3ZhbGlkYXRvci5wcm90byLJAQoJSFRUUFJvdXRlEgwKBG5hbWUYASAB",
            "KAkSDAoEcG9ydBgCIAEoDRITCgtwYXRoX3ByZWZpeBgDIAEoCRITCgtyZXdy",
            "aXRlX3VyaRgEIAEoCRIVCg1hbGxvd19vcmlnaW5zGAUgAygJEhUKDWFsbG93",
            "X21ldGhvZHMYBiADKAkSFQoNYWxsb3dfaGVhZGVycxgHIAMoCRIWCg5leHBv",
            "c2VfaGVhZGVycxgIIAMoCRIZChFhbGxvd19jcmVkZW50aWFscxgJIAEoCCJm",
            "CgpOZXR3b3JraW5nEhAKCGdhdGV3YXlzGAEgAygJEg0KBWhvc3RzGAIgAygJ",
            "Eg4KBmV4cG9ydBgDIAEoCBInCgtodHRwX3JvdXRlcxgEIAMoCzISLmtkZXBs",
            "b3kuSFRUUFJvdXRlIsgCCgNBcHASDAoEbmFtZRgBIAEoCRIRCgluYW1lc3Bh",
            "Y2UYAiABKAkSDQoFaW1hZ2UYAyABKAkSDAoEYXJncxgFIAMoCRIiCgNlbnYY",
            "BiADKAsyFS5rZGVwbG95LkFwcC5FbnZFbnRyeRImCgVwb3J0cxgHIAMoCzIX",
            "LmtkZXBsb3kuQXBwLlBvcnRzRW50cnkSEAoIcmVwbGljYXMYCCABKA0SJwoK",
            "bmV0d29ya2luZxgJIAEoCzITLmtkZXBsb3kuTmV0d29ya2luZxIiCgZzdGF0",
            "dXMYFCABKAsyEi5rZGVwbG95LkFwcFN0YXR1cxoqCghFbnZFbnRyeRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGiwKClBvcnRzRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgNOgI4ASK8AQoEVGFzaxIMCgRuYW1l",
            "GAEgASgJEhEKCW5hbWVzcGFjZRgCIAEoCRINCgVpbWFnZRgDIAEoCRIMCgRh",
            "cmdzGAUgAygJEiMKA2VudhgGIAMoCzIWLmtkZXBsb3kuVGFzay5FbnZFbnRy",
            "eRIQCghzY2hlZHVsZRgHIAEoCRITCgtjb21wbGV0aW9ucxgIIAEoDRoqCghF",
            "bnZFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIpoCCg9U",
            "YXNrQ29uc3RydWN0b3ISHgoEbmFtZRgBIAEoCUIQ4t8fDAoKXi57MSwyMjV9",
            "JBIjCgluYW1lc3BhY2UYAiABKAlCEOLfHwwKCl4uezEsMjI1fSQSHwoFaW1h",
            "Z2UYAyABKAlCEOLfHwwKCl4uezEsMjI1fSQSDAoEYXJncxgFIAMoCRIuCgNl",
            "bnYYBiADKAsyIS5rZGVwbG95LlRhc2tDb25zdHJ1Y3Rvci5FbnZFbnRyeRIi",
            "CghzY2hlZHVsZRgHIAEoCUIQ4t8fDAoKXi57MSwyMjV9JBITCgtjb21wbGV0",
            "aW9ucxgIIAEoDRoqCghFbnZFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBIuwBCgpUYXNrVXBkYXRlEh4KBG5hbWUYASABKAlCEOLfHwwK",
            "Cl4uezEsMjI1fSQSIwoJbmFtZXNwYWNlGAIgASgJQhDi3x8MCgpeLnsxLDIy",
            "NX0kEg0KBWltYWdlGAMgASgJEgwKBGFyZ3MYBSADKAkSKQoDZW52GAYgAygL",
            "Mhwua2RlcGxveS5UYXNrVXBkYXRlLkVudkVudHJ5EhAKCHNjaGVkdWxlGAcg",
            "ASgJEhMKC2NvbXBsZXRpb25zGAggASgNGioKCEVudkVudHJ5EgsKA2tleRgB",
            "IAEoCRINCgV2YWx1ZRgCIAEoCToCOAEigwMKDkFwcENvbnN0cnVjdG9yEh4K",
            "BG5hbWUYASABKAlCEOLfHwwKCl4uezEsMjI1fSQSIwoJbmFtZXNwYWNlGAIg",
            "ASgJQhDi3x8MCgpeLnsxLDIyNX0kEh8KBWltYWdlGAMgASgJQhDi3x8MCgpe",
            "LnsxLDIyNX0kEgwKBGFyZ3MYBCADKAkSLQoDZW52GAUgAygLMiAua2RlcGxv",
            "eS5BcHBDb25zdHJ1Y3Rvci5FbnZFbnRyeRIxCgVwb3J0cxgGIAMoCzIiLmtk",
            "ZXBsb3kuQXBwQ29uc3RydWN0b3IuUG9ydHNFbnRyeRIQCghyZXBsaWNhcxgH",
            "IAEoDRIvCgpuZXR3b3JraW5nGAkgASgLMhMua2RlcGxveS5OZXR3b3JraW5n",
            "Qgbi3x8CIAEaKgoIRW52RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIg",
            "ASgJOgI4ARosCgpQb3J0c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoDToCOAEi2gIKCUFwcFVwZGF0ZRIeCgRuYW1lGAEgASgJQhDi3x8MCgpe",
            "LnsxLDIyNX0kEiMKCW5hbWVzcGFjZRgCIAEoCUIQ4t8fDAoKXi57MSwyMjV9",
            "JBINCgVpbWFnZRgDIAEoCRIMCgRhcmdzGAQgAygJEigKA2VudhgFIAMoCzIb",
            "LmtkZXBsb3kuQXBwVXBkYXRlLkVudkVudHJ5EiwKBXBvcnRzGAYgAygLMh0u",
            "a2RlcGxveS5BcHBVcGRhdGUuUG9ydHNFbnRyeRIQCghyZXBsaWNhcxgHIAEo",
            "DRInCgpuZXR3b3JraW5nGAkgASgLMhMua2RlcGxveS5OZXR3b3JraW5nGioK",
            "CEVudkVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaLAoK",
            "UG9ydHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKA06AjgBIkoK",
            "A1JlZhIeCgRuYW1lGAEgASgJQhDi3x8MCgpeLnsxLDIyNX0kEiMKCW5hbWVz",
            "cGFjZRgCIAEoCUIQ4t8fDAoKXi57MSwyMjV9JCI7CgdSZXBsaWNhEg0KBXBo",
            "YXNlGAEgASgJEhEKCWNvbmRpdGlvbhgCIAEoCRIOCgZyZWFzb24YAyABKAki",
            "LwoJQXBwU3RhdHVzEiIKCHJlcGxpY2FzGAEgAygLMhAua2RlcGxveS5SZXBs",
            "aWNhIhYKA0xvZxIPCgdtZXNzYWdlGAEgASgJIioKBEFwcHMSIgoMYXBwbGlj",
            "YXRpb25zGAEgAygLMgwua2RlcGxveS5BcHAiJQoFVGFza3MSHAoFdGFza3MY",
            "ASADKAsyDS5rZGVwbG95LlRhc2siHgoJTmFtZXNwYWNlEhEKCW5hbWVzcGFj",
            "ZRgBIAEoCSIgCgpOYW1lc3BhY2VzEhIKCm5hbWVzcGFjZXMYASADKAkyrwUK",
            "DktkZXBsb3lTZXJ2aWNlEjQKCUNyZWF0ZUFwcBIXLmtkZXBsb3kuQXBwQ29u",
            "c3RydWN0b3IaDC5rZGVwbG95LkFwcCIAEi8KCVVwZGF0ZUFwcBISLmtkZXBs",
            "b3kuQXBwVXBkYXRlGgwua2RlcGxveS5BcHAiABIzCglEZWxldGVBcHASDC5r",
            "ZGVwbG95LlJlZhoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEiYKBkdldEFw",
            "cBIMLmtkZXBsb3kuUmVmGgwua2RlcGxveS5BcHAiABIvCghMaXN0QXBwcxIS",
            "LmtkZXBsb3kuTmFtZXNwYWNlGg0ua2RlcGxveS5BcHBzIgASPwoOTGlzdE5h",
            "bWVzcGFjZXMSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaEy5rZGVwbG95Lk5h",
            "bWVzcGFjZXMiABI5CglEZWxldGVBbGwSEi5rZGVwbG95Lk5hbWVzcGFjZRoW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjcKCkNyZWF0ZVRhc2sSGC5rZGVw",
            "bG95LlRhc2tDb25zdHJ1Y3RvchoNLmtkZXBsb3kuVGFzayIAEjIKClVwZGF0",
            "ZVRhc2sSEy5rZGVwbG95LlRhc2tVcGRhdGUaDS5rZGVwbG95LlRhc2siABI0",
            "CgpEZWxldGVUYXNrEgwua2RlcGxveS5SZWYaFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkiABIoCgdHZXRUYXNrEgwua2RlcGxveS5SZWYaDS5rZGVwbG95LlRh",
            "c2siABIxCglMaXN0VGFza3MSEi5rZGVwbG95Lk5hbWVzcGFjZRoOLmtkZXBs",
            "b3kuVGFza3MiABIsCgpTdHJlYW1Mb2dzEgwua2RlcGxveS5SZWYaDC5rZGVw",
            "bG95LkxvZyIAMAFCC1oJa2RlcGxveXBiYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Validator.ValidatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.HTTPRoute), global::Kdeploy.HTTPRoute.Parser, new[]{ "Name", "Port", "PathPrefix", "RewriteUri", "AllowOrigins", "AllowMethods", "AllowHeaders", "ExposeHeaders", "AllowCredentials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Networking), global::Kdeploy.Networking.Parser, new[]{ "Gateways", "Hosts", "Export", "HttpRoutes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.App), global::Kdeploy.App.Parser, new[]{ "Name", "Namespace", "Image", "Args", "Env", "Ports", "Replicas", "Networking", "Status" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Task), global::Kdeploy.Task.Parser, new[]{ "Name", "Namespace", "Image", "Args", "Env", "Schedule", "Completions" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.TaskConstructor), global::Kdeploy.TaskConstructor.Parser, new[]{ "Name", "Namespace", "Image", "Args", "Env", "Schedule", "Completions" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.TaskUpdate), global::Kdeploy.TaskUpdate.Parser, new[]{ "Name", "Namespace", "Image", "Args", "Env", "Schedule", "Completions" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.AppConstructor), global::Kdeploy.AppConstructor.Parser, new[]{ "Name", "Namespace", "Image", "Args", "Env", "Ports", "Replicas", "Networking" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.AppUpdate), global::Kdeploy.AppUpdate.Parser, new[]{ "Name", "Namespace", "Image", "Args", "Env", "Ports", "Replicas", "Networking" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Ref), global::Kdeploy.Ref.Parser, new[]{ "Name", "Namespace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Replica), global::Kdeploy.Replica.Parser, new[]{ "Phase", "Condition", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.AppStatus), global::Kdeploy.AppStatus.Parser, new[]{ "Replicas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Log), global::Kdeploy.Log.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Apps), global::Kdeploy.Apps.Parser, new[]{ "Applications" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Tasks), global::Kdeploy.Tasks.Parser, new[]{ "Tasks_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Namespace), global::Kdeploy.Namespace.Parser, new[]{ "Namespace_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Namespaces), global::Kdeploy.Namespaces.Parser, new[]{ "Namespaces_" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// HTTPRoute is a single http route(istio HttpRoute)
  /// </summary>
  public sealed partial class HTTPRoute : pb::IMessage<HTTPRoute> {
    private static readonly pb::MessageParser<HTTPRoute> _parser = new pb::MessageParser<HTTPRoute>(() => new HTTPRoute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTTPRoute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRoute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRoute(HTTPRoute other) : this() {
      name_ = other.name_;
      port_ = other.port_;
      pathPrefix_ = other.pathPrefix_;
      rewriteUri_ = other.rewriteUri_;
      allowOrigins_ = other.allowOrigins_.Clone();
      allowMethods_ = other.allowMethods_.Clone();
      allowHeaders_ = other.allowHeaders_.Clone();
      exposeHeaders_ = other.exposeHeaders_.Clone();
      allowCredentials_ = other.allowCredentials_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRoute Clone() {
      return new HTTPRoute(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "path_prefix" field.</summary>
    public const int PathPrefixFieldNumber = 3;
    private string pathPrefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathPrefix {
      get { return pathPrefix_; }
      set {
        pathPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rewrite_uri" field.</summary>
    public const int RewriteUriFieldNumber = 4;
    private string rewriteUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewriteUri {
      get { return rewriteUri_; }
      set {
        rewriteUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_origins" field.</summary>
    public const int AllowOriginsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_allowOrigins_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> allowOrigins_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of origins that are allowed to perform CORS requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowOrigins {
      get { return allowOrigins_; }
    }

    /// <summary>Field number for the "allow_methods" field.</summary>
    public const int AllowMethodsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_allowMethods_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> allowMethods_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of methods that are allowed to perform CORS requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowMethods {
      get { return allowMethods_; }
    }

    /// <summary>Field number for the "allow_headers" field.</summary>
    public const int AllowHeadersFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_allowHeaders_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> allowHeaders_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of headers that are allowed to perform CORS requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowHeaders {
      get { return allowHeaders_; }
    }

    /// <summary>Field number for the "expose_headers" field.</summary>
    public const int ExposeHeadersFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_exposeHeaders_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> exposeHeaders_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of origins that are allowed to perform CORS requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExposeHeaders {
      get { return exposeHeaders_; }
    }

    /// <summary>Field number for the "allow_credentials" field.</summary>
    public const int AllowCredentialsFieldNumber = 9;
    private bool allowCredentials_;
    /// <summary>
    /// adds `Access-Control-Allow-Credentials` header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowCredentials {
      get { return allowCredentials_; }
      set {
        allowCredentials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTTPRoute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTTPRoute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Port != other.Port) return false;
      if (PathPrefix != other.PathPrefix) return false;
      if (RewriteUri != other.RewriteUri) return false;
      if(!allowOrigins_.Equals(other.allowOrigins_)) return false;
      if(!allowMethods_.Equals(other.allowMethods_)) return false;
      if(!allowHeaders_.Equals(other.allowHeaders_)) return false;
      if(!exposeHeaders_.Equals(other.exposeHeaders_)) return false;
      if (AllowCredentials != other.AllowCredentials) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (PathPrefix.Length != 0) hash ^= PathPrefix.GetHashCode();
      if (RewriteUri.Length != 0) hash ^= RewriteUri.GetHashCode();
      hash ^= allowOrigins_.GetHashCode();
      hash ^= allowMethods_.GetHashCode();
      hash ^= allowHeaders_.GetHashCode();
      hash ^= exposeHeaders_.GetHashCode();
      if (AllowCredentials != false) hash ^= AllowCredentials.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (PathPrefix.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PathPrefix);
      }
      if (RewriteUri.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RewriteUri);
      }
      allowOrigins_.WriteTo(output, _repeated_allowOrigins_codec);
      allowMethods_.WriteTo(output, _repeated_allowMethods_codec);
      allowHeaders_.WriteTo(output, _repeated_allowHeaders_codec);
      exposeHeaders_.WriteTo(output, _repeated_exposeHeaders_codec);
      if (AllowCredentials != false) {
        output.WriteRawTag(72);
        output.WriteBool(AllowCredentials);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (PathPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathPrefix);
      }
      if (RewriteUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewriteUri);
      }
      size += allowOrigins_.CalculateSize(_repeated_allowOrigins_codec);
      size += allowMethods_.CalculateSize(_repeated_allowMethods_codec);
      size += allowHeaders_.CalculateSize(_repeated_allowHeaders_codec);
      size += exposeHeaders_.CalculateSize(_repeated_exposeHeaders_codec);
      if (AllowCredentials != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTTPRoute other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.PathPrefix.Length != 0) {
        PathPrefix = other.PathPrefix;
      }
      if (other.RewriteUri.Length != 0) {
        RewriteUri = other.RewriteUri;
      }
      allowOrigins_.Add(other.allowOrigins_);
      allowMethods_.Add(other.allowMethods_);
      allowHeaders_.Add(other.allowHeaders_);
      exposeHeaders_.Add(other.exposeHeaders_);
      if (other.AllowCredentials != false) {
        AllowCredentials = other.AllowCredentials;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 26: {
            PathPrefix = input.ReadString();
            break;
          }
          case 34: {
            RewriteUri = input.ReadString();
            break;
          }
          case 42: {
            allowOrigins_.AddEntriesFrom(input, _repeated_allowOrigins_codec);
            break;
          }
          case 50: {
            allowMethods_.AddEntriesFrom(input, _repeated_allowMethods_codec);
            break;
          }
          case 58: {
            allowHeaders_.AddEntriesFrom(input, _repeated_allowHeaders_codec);
            break;
          }
          case 66: {
            exposeHeaders_.AddEntriesFrom(input, _repeated_exposeHeaders_codec);
            break;
          }
          case 72: {
            AllowCredentials = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Networking : pb::IMessage<Networking> {
    private static readonly pb::MessageParser<Networking> _parser = new pb::MessageParser<Networking>(() => new Networking());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Networking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Networking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Networking(Networking other) : this() {
      gateways_ = other.gateways_.Clone();
      hosts_ = other.hosts_.Clone();
      export_ = other.export_;
      httpRoutes_ = other.httpRoutes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Networking Clone() {
      return new Networking(this);
    }

    /// <summary>Field number for the "gateways" field.</summary>
    public const int GatewaysFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_gateways_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> gateways_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Gateways {
      get { return gateways_; }
    }

    /// <summary>Field number for the "hosts" field.</summary>
    public const int HostsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_hosts_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> hosts_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Hosts {
      get { return hosts_; }
    }

    /// <summary>Field number for the "export" field.</summary>
    public const int ExportFieldNumber = 3;
    private bool export_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Export {
      get { return export_; }
      set {
        export_ = value;
      }
    }

    /// <summary>Field number for the "http_routes" field.</summary>
    public const int HttpRoutesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Kdeploy.HTTPRoute> _repeated_httpRoutes_codec
        = pb::FieldCodec.ForMessage(34, global::Kdeploy.HTTPRoute.Parser);
    private readonly pbc::RepeatedField<global::Kdeploy.HTTPRoute> httpRoutes_ = new pbc::RepeatedField<global::Kdeploy.HTTPRoute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kdeploy.HTTPRoute> HttpRoutes {
      get { return httpRoutes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Networking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Networking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gateways_.Equals(other.gateways_)) return false;
      if(!hosts_.Equals(other.hosts_)) return false;
      if (Export != other.Export) return false;
      if(!httpRoutes_.Equals(other.httpRoutes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gateways_.GetHashCode();
      hash ^= hosts_.GetHashCode();
      if (Export != false) hash ^= Export.GetHashCode();
      hash ^= httpRoutes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gateways_.WriteTo(output, _repeated_gateways_codec);
      hosts_.WriteTo(output, _repeated_hosts_codec);
      if (Export != false) {
        output.WriteRawTag(24);
        output.WriteBool(Export);
      }
      httpRoutes_.WriteTo(output, _repeated_httpRoutes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gateways_.CalculateSize(_repeated_gateways_codec);
      size += hosts_.CalculateSize(_repeated_hosts_codec);
      if (Export != false) {
        size += 1 + 1;
      }
      size += httpRoutes_.CalculateSize(_repeated_httpRoutes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Networking other) {
      if (other == null) {
        return;
      }
      gateways_.Add(other.gateways_);
      hosts_.Add(other.hosts_);
      if (other.Export != false) {
        Export = other.Export;
      }
      httpRoutes_.Add(other.httpRoutes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gateways_.AddEntriesFrom(input, _repeated_gateways_codec);
            break;
          }
          case 18: {
            hosts_.AddEntriesFrom(input, _repeated_hosts_codec);
            break;
          }
          case 24: {
            Export = input.ReadBool();
            break;
          }
          case 34: {
            httpRoutes_.AddEntriesFrom(input, _repeated_httpRoutes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// App is a stateless application
  /// </summary>
  public sealed partial class App : pb::IMessage<App> {
    private static readonly pb::MessageParser<App> _parser = new pb::MessageParser<App>(() => new App());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<App> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public App() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public App(App other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      image_ = other.image_;
      args_ = other.args_.Clone();
      env_ = other.env_.Clone();
      ports_ = other.ports_.Clone();
      replicas_ = other.replicas_;
      networking_ = other.networking_ != null ? other.networking_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public App Clone() {
      return new App(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// application namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private string image_ = "";
    /// <summary>
    /// docker image of application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// args are arguments given to the docker image at startup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_env_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> env_ = new pbc::MapField<string, string>();
    /// <summary>
    /// k/v map of environmental variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Env {
      get { return env_; }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 7;
    private static readonly pbc::MapField<string, uint>.Codec _map_ports_codec
        = new pbc::MapField<string, uint>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForUInt32(16), 58);
    private readonly pbc::MapField<string, uint> ports_ = new pbc::MapField<string, uint>();
    /// <summary>
    /// k/v map of ports to expose ex: http: 80 https: 443
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, uint> Ports {
      get { return ports_; }
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 8;
    private uint replicas_;
    /// <summary>
    /// number of deployment replicas
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Replicas {
      get { return replicas_; }
      set {
        replicas_ = value;
      }
    }

    /// <summary>Field number for the "networking" field.</summary>
    public const int NetworkingFieldNumber = 9;
    private global::Kdeploy.Networking networking_;
    /// <summary>
    /// gateway/service-mesh networking
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kdeploy.Networking Networking {
      get { return networking_; }
      set {
        networking_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 20;
    private global::Kdeploy.AppStatus status_;
    /// <summary>
    /// status tracks the state of the application during it's lifecycle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kdeploy.AppStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as App);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(App other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Image != other.Image) return false;
      if(!args_.Equals(other.args_)) return false;
      if (!Env.Equals(other.Env)) return false;
      if (!Ports.Equals(other.Ports)) return false;
      if (Replicas != other.Replicas) return false;
      if (!object.Equals(Networking, other.Networking)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= Env.GetHashCode();
      hash ^= Ports.GetHashCode();
      if (Replicas != 0) hash ^= Replicas.GetHashCode();
      if (networking_ != null) hash ^= Networking.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Image);
      }
      args_.WriteTo(output, _repeated_args_codec);
      env_.WriteTo(output, _map_env_codec);
      ports_.WriteTo(output, _map_ports_codec);
      if (Replicas != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Replicas);
      }
      if (networking_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Networking);
      }
      if (status_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      size += env_.CalculateSize(_map_env_codec);
      size += ports_.CalculateSize(_map_ports_codec);
      if (Replicas != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Replicas);
      }
      if (networking_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Networking);
      }
      if (status_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(App other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      args_.Add(other.args_);
      env_.Add(other.env_);
      ports_.Add(other.ports_);
      if (other.Replicas != 0) {
        Replicas = other.Replicas;
      }
      if (other.networking_ != null) {
        if (networking_ == null) {
          networking_ = new global::Kdeploy.Networking();
        }
        Networking.MergeFrom(other.Networking);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Kdeploy.AppStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Image = input.ReadString();
            break;
          }
          case 42: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 50: {
            env_.AddEntriesFrom(input, _map_env_codec);
            break;
          }
          case 58: {
            ports_.AddEntriesFrom(input, _map_ports_codec);
            break;
          }
          case 64: {
            Replicas = input.ReadUInt32();
            break;
          }
          case 74: {
            if (networking_ == null) {
              networking_ = new global::Kdeploy.Networking();
            }
            input.ReadMessage(networking_);
            break;
          }
          case 162: {
            if (status_ == null) {
              status_ = new global::Kdeploy.AppStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Task is scheduled cron job
  /// </summary>
  public sealed partial class Task : pb::IMessage<Task> {
    private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task(Task other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      image_ = other.image_;
      args_ = other.args_.Clone();
      env_ = other.env_.Clone();
      schedule_ = other.schedule_;
      completions_ = other.completions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task Clone() {
      return new Task(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// task namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private string image_ = "";
    /// <summary>
    /// docker image of task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// args are arguments given to docker image at startup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_env_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> env_ = new pbc::MapField<string, string>();
    /// <summary>
    /// k/v map of environmental variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Env {
      get { return env_; }
    }

    /// <summary>Field number for the "schedule" field.</summary>
    public const int ScheduleFieldNumber = 7;
    private string schedule_ = "";
    /// <summary>
    /// schedule is the cron schedule: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule {
      get { return schedule_; }
      set {
        schedule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "completions" field.</summary>
    public const int CompletionsFieldNumber = 8;
    private uint completions_;
    /// <summary>
    /// completions is the number of times to execute the task. If completions = 0, the task will run forever
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Completions {
      get { return completions_; }
      set {
        completions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Image != other.Image) return false;
      if(!args_.Equals(other.args_)) return false;
      if (!Env.Equals(other.Env)) return false;
      if (Schedule != other.Schedule) return false;
      if (Completions != other.Completions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= Env.GetHashCode();
      if (Schedule.Length != 0) hash ^= Schedule.GetHashCode();
      if (Completions != 0) hash ^= Completions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Image);
      }
      args_.WriteTo(output, _repeated_args_codec);
      env_.WriteTo(output, _map_env_codec);
      if (Schedule.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Schedule);
      }
      if (Completions != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Completions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      size += env_.CalculateSize(_map_env_codec);
      if (Schedule.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schedule);
      }
      if (Completions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Completions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      args_.Add(other.args_);
      env_.Add(other.env_);
      if (other.Schedule.Length != 0) {
        Schedule = other.Schedule;
      }
      if (other.Completions != 0) {
        Completions = other.Completions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Image = input.ReadString();
            break;
          }
          case 42: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 50: {
            env_.AddEntriesFrom(input, _map_env_codec);
            break;
          }
          case 58: {
            Schedule = input.ReadString();
            break;
          }
          case 64: {
            Completions = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TaskConstructor creates a task(cron job)
  /// </summary>
  public sealed partial class TaskConstructor : pb::IMessage<TaskConstructor> {
    private static readonly pb::MessageParser<TaskConstructor> _parser = new pb::MessageParser<TaskConstructor>(() => new TaskConstructor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskConstructor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskConstructor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskConstructor(TaskConstructor other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      image_ = other.image_;
      args_ = other.args_.Clone();
      env_ = other.env_.Clone();
      schedule_ = other.schedule_;
      completions_ = other.completions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskConstructor Clone() {
      return new TaskConstructor(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// task namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private string image_ = "";
    /// <summary>
    /// docker image of task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// args are arguments given to docker image at startup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_env_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> env_ = new pbc::MapField<string, string>();
    /// <summary>
    /// k/v map of environmental variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Env {
      get { return env_; }
    }

    /// <summary>Field number for the "schedule" field.</summary>
    public const int ScheduleFieldNumber = 7;
    private string schedule_ = "";
    /// <summary>
    /// schedule is the cron schedule: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule {
      get { return schedule_; }
      set {
        schedule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "completions" field.</summary>
    public const int CompletionsFieldNumber = 8;
    private uint completions_;
    /// <summary>
    /// completions is the number of times to execute the task. If completions = 0, the task will run forever
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Completions {
      get { return completions_; }
      set {
        completions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskConstructor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskConstructor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Image != other.Image) return false;
      if(!args_.Equals(other.args_)) return false;
      if (!Env.Equals(other.Env)) return false;
      if (Schedule != other.Schedule) return false;
      if (Completions != other.Completions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= Env.GetHashCode();
      if (Schedule.Length != 0) hash ^= Schedule.GetHashCode();
      if (Completions != 0) hash ^= Completions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Image);
      }
      args_.WriteTo(output, _repeated_args_codec);
      env_.WriteTo(output, _map_env_codec);
      if (Schedule.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Schedule);
      }
      if (Completions != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Completions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      size += env_.CalculateSize(_map_env_codec);
      if (Schedule.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schedule);
      }
      if (Completions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Completions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskConstructor other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      args_.Add(other.args_);
      env_.Add(other.env_);
      if (other.Schedule.Length != 0) {
        Schedule = other.Schedule;
      }
      if (other.Completions != 0) {
        Completions = other.Completions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Image = input.ReadString();
            break;
          }
          case 42: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 50: {
            env_.AddEntriesFrom(input, _map_env_codec);
            break;
          }
          case 58: {
            Schedule = input.ReadString();
            break;
          }
          case 64: {
            Completions = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TaskUpdate updates a task(cron job)
  /// </summary>
  public sealed partial class TaskUpdate : pb::IMessage<TaskUpdate> {
    private static readonly pb::MessageParser<TaskUpdate> _parser = new pb::MessageParser<TaskUpdate>(() => new TaskUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskUpdate(TaskUpdate other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      image_ = other.image_;
      args_ = other.args_.Clone();
      env_ = other.env_.Clone();
      schedule_ = other.schedule_;
      completions_ = other.completions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskUpdate Clone() {
      return new TaskUpdate(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// application namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private string image_ = "";
    /// <summary>
    /// docker image of application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// args are arguments given to docker image at startup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_env_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> env_ = new pbc::MapField<string, string>();
    /// <summary>
    /// k/v map of environmental variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Env {
      get { return env_; }
    }

    /// <summary>Field number for the "schedule" field.</summary>
    public const int ScheduleFieldNumber = 7;
    private string schedule_ = "";
    /// <summary>
    /// schedule is the cron schedule: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule {
      get { return schedule_; }
      set {
        schedule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "completions" field.</summary>
    public const int CompletionsFieldNumber = 8;
    private uint completions_;
    /// <summary>
    /// completions is the number of times to execute the task. If completions = 0, the task will run forever
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Completions {
      get { return completions_; }
      set {
        completions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Image != other.Image) return false;
      if(!args_.Equals(other.args_)) return false;
      if (!Env.Equals(other.Env)) return false;
      if (Schedule != other.Schedule) return false;
      if (Completions != other.Completions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= Env.GetHashCode();
      if (Schedule.Length != 0) hash ^= Schedule.GetHashCode();
      if (Completions != 0) hash ^= Completions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Image);
      }
      args_.WriteTo(output, _repeated_args_codec);
      env_.WriteTo(output, _map_env_codec);
      if (Schedule.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Schedule);
      }
      if (Completions != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Completions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      size += env_.CalculateSize(_map_env_codec);
      if (Schedule.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schedule);
      }
      if (Completions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Completions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      args_.Add(other.args_);
      env_.Add(other.env_);
      if (other.Schedule.Length != 0) {
        Schedule = other.Schedule;
      }
      if (other.Completions != 0) {
        Completions = other.Completions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Image = input.ReadString();
            break;
          }
          case 42: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 50: {
            env_.AddEntriesFrom(input, _map_env_codec);
            break;
          }
          case 58: {
            Schedule = input.ReadString();
            break;
          }
          case 64: {
            Completions = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// AppConstructor creates a new app
  /// </summary>
  public sealed partial class AppConstructor : pb::IMessage<AppConstructor> {
    private static readonly pb::MessageParser<AppConstructor> _parser = new pb::MessageParser<AppConstructor>(() => new AppConstructor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppConstructor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppConstructor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppConstructor(AppConstructor other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      image_ = other.image_;
      args_ = other.args_.Clone();
      env_ = other.env_.Clone();
      ports_ = other.ports_.Clone();
      replicas_ = other.replicas_;
      networking_ = other.networking_ != null ? other.networking_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppConstructor Clone() {
      return new AppConstructor(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// application namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private string image_ = "";
    /// <summary>
    /// docker image of application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// args are arguments given to the docker image at startup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_env_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
    private readonly pbc::MapField<string, string> env_ = new pbc::MapField<string, string>();
    /// <summary>
    /// k/v map of environmental variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Env {
      get { return env_; }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 6;
    private static readonly pbc::MapField<string, uint>.Codec _map_ports_codec
        = new pbc::MapField<string, uint>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForUInt32(16), 50);
    private readonly pbc::MapField<string, uint> ports_ = new pbc::MapField<string, uint>();
    /// <summary>
    /// k/v map of ports to expose ex: http: 80 https: 443
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, uint> Ports {
      get { return ports_; }
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 7;
    private uint replicas_;
    /// <summary>
    /// number of deployment replicas
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Replicas {
      get { return replicas_; }
      set {
        replicas_ = value;
      }
    }

    /// <summary>Field number for the "networking" field.</summary>
    public const int NetworkingFieldNumber = 9;
    private global::Kdeploy.Networking networking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kdeploy.Networking Networking {
      get { return networking_; }
      set {
        networking_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppConstructor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppConstructor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Image != other.Image) return false;
      if(!args_.Equals(other.args_)) return false;
      if (!Env.Equals(other.Env)) return false;
      if (!Ports.Equals(other.Ports)) return false;
      if (Replicas != other.Replicas) return false;
      if (!object.Equals(Networking, other.Networking)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= Env.GetHashCode();
      hash ^= Ports.GetHashCode();
      if (Replicas != 0) hash ^= Replicas.GetHashCode();
      if (networking_ != null) hash ^= Networking.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Image);
      }
      args_.WriteTo(output, _repeated_args_codec);
      env_.WriteTo(output, _map_env_codec);
      ports_.WriteTo(output, _map_ports_codec);
      if (Replicas != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Replicas);
      }
      if (networking_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Networking);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      size += env_.CalculateSize(_map_env_codec);
      size += ports_.CalculateSize(_map_ports_codec);
      if (Replicas != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Replicas);
      }
      if (networking_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Networking);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppConstructor other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      args_.Add(other.args_);
      env_.Add(other.env_);
      ports_.Add(other.ports_);
      if (other.Replicas != 0) {
        Replicas = other.Replicas;
      }
      if (other.networking_ != null) {
        if (networking_ == null) {
          networking_ = new global::Kdeploy.Networking();
        }
        Networking.MergeFrom(other.Networking);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Image = input.ReadString();
            break;
          }
          case 34: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 42: {
            env_.AddEntriesFrom(input, _map_env_codec);
            break;
          }
          case 50: {
            ports_.AddEntriesFrom(input, _map_ports_codec);
            break;
          }
          case 56: {
            Replicas = input.ReadUInt32();
            break;
          }
          case 74: {
            if (networking_ == null) {
              networking_ = new global::Kdeploy.Networking();
            }
            input.ReadMessage(networking_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// AppUpdate updates an App
  /// </summary>
  public sealed partial class AppUpdate : pb::IMessage<AppUpdate> {
    private static readonly pb::MessageParser<AppUpdate> _parser = new pb::MessageParser<AppUpdate>(() => new AppUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUpdate(AppUpdate other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      image_ = other.image_;
      args_ = other.args_.Clone();
      env_ = other.env_.Clone();
      ports_ = other.ports_.Clone();
      replicas_ = other.replicas_;
      networking_ = other.networking_ != null ? other.networking_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUpdate Clone() {
      return new AppUpdate(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// application namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private string image_ = "";
    /// <summary>
    /// docker image of application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// args are arguments given to the docker image at startup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_env_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
    private readonly pbc::MapField<string, string> env_ = new pbc::MapField<string, string>();
    /// <summary>
    /// k/v map of environmental variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Env {
      get { return env_; }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 6;
    private static readonly pbc::MapField<string, uint>.Codec _map_ports_codec
        = new pbc::MapField<string, uint>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForUInt32(16), 50);
    private readonly pbc::MapField<string, uint> ports_ = new pbc::MapField<string, uint>();
    /// <summary>
    /// k/v map of ports to expose ex: http: 80 https: 443
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, uint> Ports {
      get { return ports_; }
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 7;
    private uint replicas_;
    /// <summary>
    /// number of deployment replicas
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Replicas {
      get { return replicas_; }
      set {
        replicas_ = value;
      }
    }

    /// <summary>Field number for the "networking" field.</summary>
    public const int NetworkingFieldNumber = 9;
    private global::Kdeploy.Networking networking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kdeploy.Networking Networking {
      get { return networking_; }
      set {
        networking_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Image != other.Image) return false;
      if(!args_.Equals(other.args_)) return false;
      if (!Env.Equals(other.Env)) return false;
      if (!Ports.Equals(other.Ports)) return false;
      if (Replicas != other.Replicas) return false;
      if (!object.Equals(Networking, other.Networking)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= Env.GetHashCode();
      hash ^= Ports.GetHashCode();
      if (Replicas != 0) hash ^= Replicas.GetHashCode();
      if (networking_ != null) hash ^= Networking.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Image);
      }
      args_.WriteTo(output, _repeated_args_codec);
      env_.WriteTo(output, _map_env_codec);
      ports_.WriteTo(output, _map_ports_codec);
      if (Replicas != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Replicas);
      }
      if (networking_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Networking);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      size += env_.CalculateSize(_map_env_codec);
      size += ports_.CalculateSize(_map_ports_codec);
      if (Replicas != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Replicas);
      }
      if (networking_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Networking);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      args_.Add(other.args_);
      env_.Add(other.env_);
      ports_.Add(other.ports_);
      if (other.Replicas != 0) {
        Replicas = other.Replicas;
      }
      if (other.networking_ != null) {
        if (networking_ == null) {
          networking_ = new global::Kdeploy.Networking();
        }
        Networking.MergeFrom(other.Networking);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Image = input.ReadString();
            break;
          }
          case 34: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 42: {
            env_.AddEntriesFrom(input, _map_env_codec);
            break;
          }
          case 50: {
            ports_.AddEntriesFrom(input, _map_ports_codec);
            break;
          }
          case 56: {
            Replicas = input.ReadUInt32();
            break;
          }
          case 74: {
            if (networking_ == null) {
              networking_ = new global::Kdeploy.Networking();
            }
            input.ReadMessage(networking_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ref : pb::IMessage<Ref> {
    private static readonly pb::MessageParser<Ref> _parser = new pb::MessageParser<Ref>(() => new Ref());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ref> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ref() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ref(Ref other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ref Clone() {
      return new Ref(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// application namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ref);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ref other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ref other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Replica : pb::IMessage<Replica> {
    private static readonly pb::MessageParser<Replica> _parser = new pb::MessageParser<Replica>(() => new Replica());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Replica> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Replica() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Replica(Replica other) : this() {
      phase_ = other.phase_;
      condition_ = other.condition_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Replica Clone() {
      return new Replica(this);
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private string phase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phase {
      get { return phase_; }
      set {
        phase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 2;
    private string condition_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Condition {
      get { return condition_; }
      set {
        condition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Replica);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Replica other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phase != other.Phase) return false;
      if (Condition != other.Condition) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phase.Length != 0) hash ^= Phase.GetHashCode();
      if (Condition.Length != 0) hash ^= Condition.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Phase);
      }
      if (Condition.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Condition);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phase);
      }
      if (Condition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Condition);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Replica other) {
      if (other == null) {
        return;
      }
      if (other.Phase.Length != 0) {
        Phase = other.Phase;
      }
      if (other.Condition.Length != 0) {
        Condition = other.Condition;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Phase = input.ReadString();
            break;
          }
          case 18: {
            Condition = input.ReadString();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppStatus : pb::IMessage<AppStatus> {
    private static readonly pb::MessageParser<AppStatus> _parser = new pb::MessageParser<AppStatus>(() => new AppStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppStatus(AppStatus other) : this() {
      replicas_ = other.replicas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppStatus Clone() {
      return new AppStatus(this);
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kdeploy.Replica> _repeated_replicas_codec
        = pb::FieldCodec.ForMessage(10, global::Kdeploy.Replica.Parser);
    private readonly pbc::RepeatedField<global::Kdeploy.Replica> replicas_ = new pbc::RepeatedField<global::Kdeploy.Replica>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kdeploy.Replica> Replicas {
      get { return replicas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!replicas_.Equals(other.replicas_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= replicas_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      replicas_.WriteTo(output, _repeated_replicas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += replicas_.CalculateSize(_repeated_replicas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppStatus other) {
      if (other == null) {
        return;
      }
      replicas_.Add(other.replicas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            replicas_.AddEntriesFrom(input, _repeated_replicas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Log : pb::IMessage<Log> {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Apps : pb::IMessage<Apps> {
    private static readonly pb::MessageParser<Apps> _parser = new pb::MessageParser<Apps>(() => new Apps());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Apps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apps(Apps other) : this() {
      applications_ = other.applications_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apps Clone() {
      return new Apps(this);
    }

    /// <summary>Field number for the "applications" field.</summary>
    public const int ApplicationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kdeploy.App> _repeated_applications_codec
        = pb::FieldCodec.ForMessage(10, global::Kdeploy.App.Parser);
    private readonly pbc::RepeatedField<global::Kdeploy.App> applications_ = new pbc::RepeatedField<global::Kdeploy.App>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kdeploy.App> Applications {
      get { return applications_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Apps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Apps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!applications_.Equals(other.applications_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= applications_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      applications_.WriteTo(output, _repeated_applications_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += applications_.CalculateSize(_repeated_applications_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Apps other) {
      if (other == null) {
        return;
      }
      applications_.Add(other.applications_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            applications_.AddEntriesFrom(input, _repeated_applications_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tasks : pb::IMessage<Tasks> {
    private static readonly pb::MessageParser<Tasks> _parser = new pb::MessageParser<Tasks>(() => new Tasks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tasks(Tasks other) : this() {
      tasks_ = other.tasks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tasks Clone() {
      return new Tasks(this);
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int Tasks_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kdeploy.Task> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(10, global::Kdeploy.Task.Parser);
    private readonly pbc::RepeatedField<global::Kdeploy.Task> tasks_ = new pbc::RepeatedField<global::Kdeploy.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kdeploy.Task> Tasks_ {
      get { return tasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tasks_.Equals(other.tasks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tasks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tasks_.WriteTo(output, _repeated_tasks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tasks other) {
      if (other == null) {
        return;
      }
      tasks_.Add(other.tasks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Namespace : pb::IMessage<Namespace> {
    private static readonly pb::MessageParser<Namespace> _parser = new pb::MessageParser<Namespace>(() => new Namespace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Namespace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespace(Namespace other) : this() {
      namespace_ = other.namespace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespace Clone() {
      return new Namespace(this);
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int Namespace_FieldNumber = 1;
    private string namespace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace_ {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Namespace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Namespace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Namespace_ != other.Namespace_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Namespace_.Length != 0) hash ^= Namespace_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Namespace_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Namespace_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Namespace_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Namespace other) {
      if (other == null) {
        return;
      }
      if (other.Namespace_.Length != 0) {
        Namespace_ = other.Namespace_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Namespace_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Namespaces : pb::IMessage<Namespaces> {
    private static readonly pb::MessageParser<Namespaces> _parser = new pb::MessageParser<Namespaces>(() => new Namespaces());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Namespaces> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespaces() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespaces(Namespaces other) : this() {
      namespaces_ = other.namespaces_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespaces Clone() {
      return new Namespaces(this);
    }

    /// <summary>Field number for the "namespaces" field.</summary>
    public const int Namespaces_FieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_namespaces_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> namespaces_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Namespaces_ {
      get { return namespaces_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Namespaces);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Namespaces other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!namespaces_.Equals(other.namespaces_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= namespaces_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      namespaces_.WriteTo(output, _repeated_namespaces_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += namespaces_.CalculateSize(_repeated_namespaces_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Namespaces other) {
      if (other == null) {
        return;
      }
      namespaces_.Add(other.namespaces_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            namespaces_.AddEntriesFrom(input, _repeated_namespaces_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
