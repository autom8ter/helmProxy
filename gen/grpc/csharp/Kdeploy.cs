// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: kdeploy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kdeploy {

  /// <summary>Holder for reflection information generated from kdeploy.proto</summary>
  public static partial class KdeployReflection {

    #region Descriptor
    /// <summary>File descriptor for kdeploy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KdeployReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1rZGVwbG95LnByb3RvEgdrZGVwbG95Ghxnb29nbGUvcHJvdG9idWYvc3Ry",
            "dWN0LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGhln",
            "b29nbGUvcHJvdG9idWYvYW55LnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1w",
            "dHkucHJvdG8aNmdpdGh1Yi5jb20vbXdpdGtvdy9nby1wcm90by12YWxpZGF0",
            "b3JzL3ZhbGlkYXRvci5wcm90byKiAgoRU2VydmVyVExTU2V0dGluZ3MSFgoO",
            "aHR0cHNfcmVkaXJlY3QYASABKAgSHgoEbW9kZRgCIAEoDjIQLmtkZXBsb3ku",
            "VExTbW9kZRIaChJzZXJ2ZXJfY2VydGlmaWNhdGUYAyABKAkSEwoLcHJpdmF0",
            "ZV9rZXkYBCABKAkSFwoPY2FfY2VydGlmaWNhdGVzGAUgASgJEhcKD2NyZWRl",
            "bnRpYWxfbmFtZRgKIAEoCRIZChFzdWJqZWN0X2FsdF9uYW1lcxgGIAMoCRIf",
            "Chd2ZXJpZnlfY2VydGlmaWNhdGVfc3BraRgLIAMoCRIfChd2ZXJpZnlfY2Vy",
            "dGlmaWNhdGVfaGFzaBgMIAMoCRIVCg1jaXBoZXJfc3VpdGVzGAkgAygJIrsB",
            "Cg9HYXRld2F5TGlzdGVuZXISFAoEcG9ydBgBIAEoDUIG4t8fAhAAEh4KBG5h",
            "bWUYAiABKAlCEOLfHwwKCl4uezEsMjI1fSQSKwoIcHJvdG9jb2wYAyABKA4y",
            "ES5rZGVwbG95LlByb3RvY29sQgbi3x8CEAASFQoFaG9zdHMYBCADKAlCBuLf",
            "HwJgABIuCgp0bHNfY29uZmlnGAUgASgLMhoua2RlcGxveS5TZXJ2ZXJUTFNT",
            "ZXR0aW5ncyKXAgoHR2F0ZXdheRIMCgRuYW1lGAEgASgJEhEKCW5hbWVzcGFj",
            "ZRgCIAEoCRIrCglsaXN0ZW5lcnMYAyADKAsyGC5rZGVwbG95LkdhdGV3YXlM",
            "aXN0ZW5lchIsCgZsYWJlbHMYBCADKAsyHC5rZGVwbG95LkdhdGV3YXkuTGFi",
            "ZWxzRW50cnkSMAoIc2VsZWN0b3IYBSADKAsyHi5rZGVwbG95LkdhdGV3YXku",
            "U2VsZWN0b3JFbnRyeRotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoF",
            "dmFsdWUYAiABKAk6AjgBGi8KDVNlbGVjdG9yRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ASLaAgoMR2F0ZXdheUlucHV0Eh4KBG5hbWUY",
            "ASABKAlCEOLfHwwKCl4uezEsMjI1fSQSIwoJbmFtZXNwYWNlGAIgASgJQhDi",
            "3x8MCgpeLnsxLDIyNX0kEisKCWxpc3RlbmVycxgDIAMoCzIYLmtkZXBsb3ku",
            "R2F0ZXdheUxpc3RlbmVyEjkKBmxhYmVscxgEIAMoCzIhLmtkZXBsb3kuR2F0",
            "ZXdheUlucHV0LkxhYmVsc0VudHJ5Qgbi3x8CIAESPQoIc2VsZWN0b3IYBSAD",
            "KAsyIy5rZGVwbG95LkdhdGV3YXlJbnB1dC5TZWxlY3RvckVudHJ5Qgbi3x8C",
            "IAEaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJ",
            "OgI4ARovCg1TZWxlY3RvckVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoCToCOAEi4wEKCUhUVFBSb3V0ZRIeCgRuYW1lGAEgASgJQhDi3x8MCgpe",
            "LnsxLDIyNX0kEhQKBHBvcnQYAiABKA1CBuLfHwIQABITCgtwYXRoX3ByZWZp",
            "eBgDIAEoCRITCgtyZXdyaXRlX3VyaRgEIAEoCRIVCg1hbGxvd19vcmlnaW5z",
            "GAUgAygJEhUKDWFsbG93X21ldGhvZHMYBiADKAkSFQoNYWxsb3dfaGVhZGVy",
            "cxgHIAMoCRIWCg5leHBvc2VfaGVhZGVycxgIIAMoCRIZChFhbGxvd19jcmVk",
            "ZW50aWFscxgJIAEoCCJmCgpOZXR3b3JraW5nEhAKCGdhdGV3YXlzGAEgAygJ",
            "Eg0KBWhvc3RzGAIgAygJEg4KBmV4cG9ydBgDIAEoCBInCgtodHRwX3JvdXRl",
            "cxgEIAMoCzISLmtkZXBsb3kuSFRUUFJvdXRlIt4ECgNBcHASHgoEbmFtZRgB",
            "IAEoCUIQ4t8fDAoKXi57MSwyMjV9JBIjCgluYW1lc3BhY2UYAiABKAlCEOLf",
            "HwwKCl4uezEsMjI1fSQSHwoFaW1hZ2UYAyABKAlCEOLfHwwKCl4uezEsMjI1",
            "fSQSDAoEYXJncxgFIAMoCRIiCgNlbnYYBiADKAsyFS5rZGVwbG95LkFwcC5F",
            "bnZFbnRyeRIuCgVwb3J0cxgHIAMoCzIXLmtkZXBsb3kuQXBwLlBvcnRzRW50",
            "cnlCBuLfHwIgARIQCghyZXBsaWNhcxgIIAEoDRIwCgZsYWJlbHMYCSADKAsy",
            "GC5rZGVwbG95LkFwcC5MYWJlbHNFbnRyeUIG4t8fAiABEjQKCHNlbGVjdG9y",
            "GAogAygLMhoua2RlcGxveS5BcHAuU2VsZWN0b3JFbnRyeUIG4t8fAiABEi8K",
            "Cm5ldHdvcmtpbmcYCyABKAsyEy5rZGVwbG95Lk5ldHdvcmtpbmdCBuLfHwIg",
            "ARIqCgZzdGF0dXMYFCABKAsyEi5rZGVwbG95LkFwcFN0YXR1c0IG4t8fAiAB",
            "GioKCEVudkVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEa",
            "LAoKUG9ydHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKA06AjgB",
            "Gi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToC",
            "OAEaLwoNU2VsZWN0b3JFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiAB",
            "KAk6AjgBIs4DCgRUYXNrEh4KBG5hbWUYASABKAlCEOLfHwwKCl4uezEsMjI1",
            "fSQSIwoJbmFtZXNwYWNlGAIgASgJQhDi3x8MCgpeLnsxLDIyNX0kEh8KBWlt",
            "YWdlGAMgASgJQhDi3x8MCgpeLnsxLDIyNX0kEgwKBGFyZ3MYBSADKAkSIwoD",
            "ZW52GAYgAygLMhYua2RlcGxveS5UYXNrLkVudkVudHJ5EiIKCHNjaGVkdWxl",
            "GAcgASgJQhDi3x8MCgpeLnsxLDIyNX0kEhMKC2NvbXBsZXRpb25zGAggASgN",
            "EjEKBmxhYmVscxgJIAMoCzIZLmtkZXBsb3kuVGFzay5MYWJlbHNFbnRyeUIG",
            "4t8fAiABEjUKCHNlbGVjdG9yGAogAygLMhsua2RlcGxveS5UYXNrLlNlbGVj",
            "dG9yRW50cnlCBuLfHwIgARoqCghFbnZFbnRyeRILCgNrZXkYASABKAkSDQoF",
            "dmFsdWUYAiABKAk6AjgBGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoCToCOAEaLwoNU2VsZWN0b3JFbnRyeRILCgNrZXkYASAB",
            "KAkSDQoFdmFsdWUYAiABKAk6AjgBIuIDCglUYXNrSW5wdXQSHgoEbmFtZRgB",
            "IAEoCUIQ4t8fDAoKXi57MSwyMjV9JBIjCgluYW1lc3BhY2UYAiABKAlCEOLf",
            "HwwKCl4uezEsMjI1fSQSHwoFaW1hZ2UYAyABKAlCEOLfHwwKCl4uezEsMjI1",
            "fSQSDAoEYXJncxgFIAMoCRIoCgNlbnYYBiADKAsyGy5rZGVwbG95LlRhc2tJ",
            "bnB1dC5FbnZFbnRyeRIiCghzY2hlZHVsZRgHIAEoCUIQ4t8fDAoKXi57MSwy",
            "MjV9JBITCgtjb21wbGV0aW9ucxgIIAEoDRI2CgZsYWJlbHMYCSADKAsyHi5r",
            "ZGVwbG95LlRhc2tJbnB1dC5MYWJlbHNFbnRyeUIG4t8fAiABEjoKCHNlbGVj",
            "dG9yGAogAygLMiAua2RlcGxveS5UYXNrSW5wdXQuU2VsZWN0b3JFbnRyeUIG",
            "4t8fAiABGioKCEVudkVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEo",
            "CToCOAEaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIg",
            "ASgJOgI4ARovCg1TZWxlY3RvckVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoCToCOAEiywQKCEFwcElucHV0Eh4KBG5hbWUYASABKAlCEOLfHwwK",
            "Cl4uezEsMjI1fSQSIwoJbmFtZXNwYWNlGAIgASgJQhDi3x8MCgpeLnsxLDIy",
            "NX0kEh8KBWltYWdlGAMgASgJQhDi3x8MCgpeLnsxLDIyNX0kEgwKBGFyZ3MY",
            "BCADKAkSJwoDZW52GAUgAygLMhoua2RlcGxveS5BcHBJbnB1dC5FbnZFbnRy",
            "eRIzCgVwb3J0cxgGIAMoCzIcLmtkZXBsb3kuQXBwSW5wdXQuUG9ydHNFbnRy",
            "eUIG4t8fAiABEhAKCHJlcGxpY2FzGAcgASgNEi8KCm5ldHdvcmtpbmcYCSAB",
            "KAsyEy5rZGVwbG95Lk5ldHdvcmtpbmdCBuLfHwIgARI1CgZsYWJlbHMYCiAD",
            "KAsyHS5rZGVwbG95LkFwcElucHV0LkxhYmVsc0VudHJ5Qgbi3x8CIAESOQoI",
            "c2VsZWN0b3IYCyADKAsyHy5rZGVwbG95LkFwcElucHV0LlNlbGVjdG9yRW50",
            "cnlCBuLfHwIgARoqCghFbnZFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBGiwKClBvcnRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVl",
            "GAIgASgNOgI4ARotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKAk6AjgBGi8KDVNlbGVjdG9yRW50cnkSCwoDa2V5GAEgASgJEg0K",
            "BXZhbHVlGAIgASgJOgI4ASJKCgNSZWYSHgoEbmFtZRgBIAEoCUIQ4t8fDAoK",
            "Xi57MSwyMjV9JBIjCgluYW1lc3BhY2UYAiABKAlCEOLfHwwKCl4uezEsMjI1",
            "fSQiOwoHUmVwbGljYRINCgVwaGFzZRgBIAEoCRIRCgljb25kaXRpb24YAiAB",
            "KAkSDgoGcmVhc29uGAMgASgJIi8KCUFwcFN0YXR1cxIiCghyZXBsaWNhcxgB",
            "IAMoCzIQLmtkZXBsb3kuUmVwbGljYSIWCgNMb2cSDwoHbWVzc2FnZRgBIAEo",
            "CSIqCgRBcHBzEiIKDGFwcGxpY2F0aW9ucxgBIAMoCzIMLmtkZXBsb3kuQXBw",
            "IiUKBVRhc2tzEhwKBXRhc2tzGAEgAygLMg0ua2RlcGxveS5UYXNrIh4KCU5h",
            "bWVzcGFjZRIRCgluYW1lc3BhY2UYASABKAkiIAoKTmFtZXNwYWNlcxISCgpu",
            "YW1lc3BhY2VzGAEgAygJKmcKCFByb3RvY29sEhQKEElOVkFMSURfUFJPVE9D",
            "T0wQABIICgRIVFRQEAESCQoFSFRUUFMQAhIICgRHUlBDEAMSCQoFSFRUUDIQ",
            "BBIJCgVNT05HTxAFEgcKA1RDUBAGEgcKA1RMUxAHKloKB1RMU21vZGUSDwoL",
            "UEFTU1RIUk9VR0gQABIKCgZTSU1QTEUQARIKCgZNVVRVQUwQAhIUChBBVVRP",
            "X1BBU1NUSFJPVUdIEAMSEAoMSVNUSU9fTVVUVUFMEAQyggcKDktkZXBsb3lT",
            "ZXJ2aWNlEi4KCUNyZWF0ZUFwcBIRLmtkZXBsb3kuQXBwSW5wdXQaDC5rZGVw",
            "bG95LkFwcCIAEi4KCVVwZGF0ZUFwcBIRLmtkZXBsb3kuQXBwSW5wdXQaDC5r",
            "ZGVwbG95LkFwcCIAEjMKCURlbGV0ZUFwcBIMLmtkZXBsb3kuUmVmGhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5IgASJgoGR2V0QXBwEgwua2RlcGxveS5SZWYa",
            "DC5rZGVwbG95LkFwcCIAEi8KCExpc3RBcHBzEhIua2RlcGxveS5OYW1lc3Bh",
            "Y2UaDS5rZGVwbG95LkFwcHMiABI/Cg5MaXN0TmFtZXNwYWNlcxIWLmdvb2ds",
            "ZS5wcm90b2J1Zi5FbXB0eRoTLmtkZXBsb3kuTmFtZXNwYWNlcyIAEjkKCURl",
            "bGV0ZUFsbBISLmtkZXBsb3kuTmFtZXNwYWNlGhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASMQoKQ3JlYXRlVGFzaxISLmtkZXBsb3kuVGFza0lucHV0Gg0u",
            "a2RlcGxveS5UYXNrIgASMQoKVXBkYXRlVGFzaxISLmtkZXBsb3kuVGFza0lu",
            "cHV0Gg0ua2RlcGxveS5UYXNrIgASNAoKRGVsZXRlVGFzaxIMLmtkZXBsb3ku",
            "UmVmGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASKAoHR2V0VGFzaxIMLmtk",
            "ZXBsb3kuUmVmGg0ua2RlcGxveS5UYXNrIgASMQoJTGlzdFRhc2tzEhIua2Rl",
            "cGxveS5OYW1lc3BhY2UaDi5rZGVwbG95LlRhc2tzIgASLAoKU3RyZWFtTG9n",
            "cxIMLmtkZXBsb3kuUmVmGgwua2RlcGxveS5Mb2ciADABEjoKDUNyZWF0ZUdh",
            "dGV3YXkSFS5rZGVwbG95LkdhdGV3YXlJbnB1dBoQLmtkZXBsb3kuR2F0ZXdh",
            "eSIAEjoKDVVwZGF0ZUdhdGV3YXkSFS5rZGVwbG95LkdhdGV3YXlJbnB1dBoQ",
            "LmtkZXBsb3kuR2F0ZXdheSIAEjcKDURlbGV0ZUdhdGV3YXkSDC5rZGVwbG95",
            "LlJlZhoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEi4KCkdldEdhdGV3YXkS",
            "DC5rZGVwbG95LlJlZhoQLmtkZXBsb3kuR2F0ZXdheSIAQgtaCWtkZXBsb3lw",
            "YmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Validator.ValidatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Kdeploy.Protocol), typeof(global::Kdeploy.TLSmode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.ServerTLSSettings), global::Kdeploy.ServerTLSSettings.Parser, new[]{ "HttpsRedirect", "Mode", "ServerCertificate", "PrivateKey", "CaCertificates", "CredentialName", "SubjectAltNames", "VerifyCertificateSpki", "VerifyCertificateHash", "CipherSuites" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.GatewayListener), global::Kdeploy.GatewayListener.Parser, new[]{ "Port", "Name", "Protocol", "Hosts", "TlsConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Gateway), global::Kdeploy.Gateway.Parser, new[]{ "Name", "Namespace", "Listeners", "Labels", "Selector" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.GatewayInput), global::Kdeploy.GatewayInput.Parser, new[]{ "Name", "Namespace", "Listeners", "Labels", "Selector" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.HTTPRoute), global::Kdeploy.HTTPRoute.Parser, new[]{ "Name", "Port", "PathPrefix", "RewriteUri", "AllowOrigins", "AllowMethods", "AllowHeaders", "ExposeHeaders", "AllowCredentials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Networking), global::Kdeploy.Networking.Parser, new[]{ "Gateways", "Hosts", "Export", "HttpRoutes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.App), global::Kdeploy.App.Parser, new[]{ "Name", "Namespace", "Image", "Args", "Env", "Ports", "Replicas", "Labels", "Selector", "Networking", "Status" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Task), global::Kdeploy.Task.Parser, new[]{ "Name", "Namespace", "Image", "Args", "Env", "Schedule", "Completions", "Labels", "Selector" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.TaskInput), global::Kdeploy.TaskInput.Parser, new[]{ "Name", "Namespace", "Image", "Args", "Env", "Schedule", "Completions", "Labels", "Selector" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.AppInput), global::Kdeploy.AppInput.Parser, new[]{ "Name", "Namespace", "Image", "Args", "Env", "Ports", "Replicas", "Networking", "Labels", "Selector" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Ref), global::Kdeploy.Ref.Parser, new[]{ "Name", "Namespace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Replica), global::Kdeploy.Replica.Parser, new[]{ "Phase", "Condition", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.AppStatus), global::Kdeploy.AppStatus.Parser, new[]{ "Replicas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Log), global::Kdeploy.Log.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Apps), global::Kdeploy.Apps.Parser, new[]{ "Applications" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Tasks), global::Kdeploy.Tasks.Parser, new[]{ "Tasks_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Namespace), global::Kdeploy.Namespace.Parser, new[]{ "Namespace_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Kdeploy.Namespaces), global::Kdeploy.Namespaces.Parser, new[]{ "Namespaces_" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Protocol {
    [pbr::OriginalName("INVALID_PROTOCOL")] InvalidProtocol = 0,
    [pbr::OriginalName("HTTP")] Http = 1,
    [pbr::OriginalName("HTTPS")] Https = 2,
    [pbr::OriginalName("GRPC")] Grpc = 3,
    [pbr::OriginalName("HTTP2")] Http2 = 4,
    [pbr::OriginalName("MONGO")] Mongo = 5,
    [pbr::OriginalName("TCP")] Tcp = 6,
    [pbr::OriginalName("TLS")] Tls = 7,
  }

  public enum TLSmode {
    [pbr::OriginalName("PASSTHROUGH")] Passthrough = 0,
    [pbr::OriginalName("SIMPLE")] Simple = 1,
    [pbr::OriginalName("MUTUAL")] Mutual = 2,
    [pbr::OriginalName("AUTO_PASSTHROUGH")] AutoPassthrough = 3,
    [pbr::OriginalName("ISTIO_MUTUAL")] IstioMutual = 4,
  }

  #endregion

  #region Messages
  public sealed partial class ServerTLSSettings : pb::IMessage<ServerTLSSettings> {
    private static readonly pb::MessageParser<ServerTLSSettings> _parser = new pb::MessageParser<ServerTLSSettings>(() => new ServerTLSSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerTLSSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerTLSSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerTLSSettings(ServerTLSSettings other) : this() {
      httpsRedirect_ = other.httpsRedirect_;
      mode_ = other.mode_;
      serverCertificate_ = other.serverCertificate_;
      privateKey_ = other.privateKey_;
      caCertificates_ = other.caCertificates_;
      credentialName_ = other.credentialName_;
      subjectAltNames_ = other.subjectAltNames_.Clone();
      verifyCertificateSpki_ = other.verifyCertificateSpki_.Clone();
      verifyCertificateHash_ = other.verifyCertificateHash_.Clone();
      cipherSuites_ = other.cipherSuites_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerTLSSettings Clone() {
      return new ServerTLSSettings(this);
    }

    /// <summary>Field number for the "https_redirect" field.</summary>
    public const int HttpsRedirectFieldNumber = 1;
    private bool httpsRedirect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HttpsRedirect {
      get { return httpsRedirect_; }
      set {
        httpsRedirect_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 2;
    private global::Kdeploy.TLSmode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kdeploy.TLSmode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "server_certificate" field.</summary>
    public const int ServerCertificateFieldNumber = 3;
    private string serverCertificate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerCertificate {
      get { return serverCertificate_; }
      set {
        serverCertificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_key" field.</summary>
    public const int PrivateKeyFieldNumber = 4;
    private string privateKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ca_certificates" field.</summary>
    public const int CaCertificatesFieldNumber = 5;
    private string caCertificates_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CaCertificates {
      get { return caCertificates_; }
      set {
        caCertificates_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "credential_name" field.</summary>
    public const int CredentialNameFieldNumber = 10;
    private string credentialName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CredentialName {
      get { return credentialName_; }
      set {
        credentialName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subject_alt_names" field.</summary>
    public const int SubjectAltNamesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_subjectAltNames_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> subjectAltNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SubjectAltNames {
      get { return subjectAltNames_; }
    }

    /// <summary>Field number for the "verify_certificate_spki" field.</summary>
    public const int VerifyCertificateSpkiFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_verifyCertificateSpki_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> verifyCertificateSpki_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> VerifyCertificateSpki {
      get { return verifyCertificateSpki_; }
    }

    /// <summary>Field number for the "verify_certificate_hash" field.</summary>
    public const int VerifyCertificateHashFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_verifyCertificateHash_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> verifyCertificateHash_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> VerifyCertificateHash {
      get { return verifyCertificateHash_; }
    }

    /// <summary>Field number for the "cipher_suites" field.</summary>
    public const int CipherSuitesFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_cipherSuites_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> cipherSuites_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CipherSuites {
      get { return cipherSuites_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerTLSSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerTLSSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HttpsRedirect != other.HttpsRedirect) return false;
      if (Mode != other.Mode) return false;
      if (ServerCertificate != other.ServerCertificate) return false;
      if (PrivateKey != other.PrivateKey) return false;
      if (CaCertificates != other.CaCertificates) return false;
      if (CredentialName != other.CredentialName) return false;
      if(!subjectAltNames_.Equals(other.subjectAltNames_)) return false;
      if(!verifyCertificateSpki_.Equals(other.verifyCertificateSpki_)) return false;
      if(!verifyCertificateHash_.Equals(other.verifyCertificateHash_)) return false;
      if(!cipherSuites_.Equals(other.cipherSuites_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HttpsRedirect != false) hash ^= HttpsRedirect.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (ServerCertificate.Length != 0) hash ^= ServerCertificate.GetHashCode();
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      if (CaCertificates.Length != 0) hash ^= CaCertificates.GetHashCode();
      if (CredentialName.Length != 0) hash ^= CredentialName.GetHashCode();
      hash ^= subjectAltNames_.GetHashCode();
      hash ^= verifyCertificateSpki_.GetHashCode();
      hash ^= verifyCertificateHash_.GetHashCode();
      hash ^= cipherSuites_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HttpsRedirect != false) {
        output.WriteRawTag(8);
        output.WriteBool(HttpsRedirect);
      }
      if (Mode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Mode);
      }
      if (ServerCertificate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerCertificate);
      }
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PrivateKey);
      }
      if (CaCertificates.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CaCertificates);
      }
      subjectAltNames_.WriteTo(output, _repeated_subjectAltNames_codec);
      cipherSuites_.WriteTo(output, _repeated_cipherSuites_codec);
      if (CredentialName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CredentialName);
      }
      verifyCertificateSpki_.WriteTo(output, _repeated_verifyCertificateSpki_codec);
      verifyCertificateHash_.WriteTo(output, _repeated_verifyCertificateHash_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HttpsRedirect != false) {
        size += 1 + 1;
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (ServerCertificate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerCertificate);
      }
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateKey);
      }
      if (CaCertificates.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CaCertificates);
      }
      if (CredentialName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CredentialName);
      }
      size += subjectAltNames_.CalculateSize(_repeated_subjectAltNames_codec);
      size += verifyCertificateSpki_.CalculateSize(_repeated_verifyCertificateSpki_codec);
      size += verifyCertificateHash_.CalculateSize(_repeated_verifyCertificateHash_codec);
      size += cipherSuites_.CalculateSize(_repeated_cipherSuites_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerTLSSettings other) {
      if (other == null) {
        return;
      }
      if (other.HttpsRedirect != false) {
        HttpsRedirect = other.HttpsRedirect;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.ServerCertificate.Length != 0) {
        ServerCertificate = other.ServerCertificate;
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
      if (other.CaCertificates.Length != 0) {
        CaCertificates = other.CaCertificates;
      }
      if (other.CredentialName.Length != 0) {
        CredentialName = other.CredentialName;
      }
      subjectAltNames_.Add(other.subjectAltNames_);
      verifyCertificateSpki_.Add(other.verifyCertificateSpki_);
      verifyCertificateHash_.Add(other.verifyCertificateHash_);
      cipherSuites_.Add(other.cipherSuites_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HttpsRedirect = input.ReadBool();
            break;
          }
          case 16: {
            mode_ = (global::Kdeploy.TLSmode) input.ReadEnum();
            break;
          }
          case 26: {
            ServerCertificate = input.ReadString();
            break;
          }
          case 34: {
            PrivateKey = input.ReadString();
            break;
          }
          case 42: {
            CaCertificates = input.ReadString();
            break;
          }
          case 50: {
            subjectAltNames_.AddEntriesFrom(input, _repeated_subjectAltNames_codec);
            break;
          }
          case 74: {
            cipherSuites_.AddEntriesFrom(input, _repeated_cipherSuites_codec);
            break;
          }
          case 82: {
            CredentialName = input.ReadString();
            break;
          }
          case 90: {
            verifyCertificateSpki_.AddEntriesFrom(input, _repeated_verifyCertificateSpki_codec);
            break;
          }
          case 98: {
            verifyCertificateHash_.AddEntriesFrom(input, _repeated_verifyCertificateHash_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GatewayListener : pb::IMessage<GatewayListener> {
    private static readonly pb::MessageParser<GatewayListener> _parser = new pb::MessageParser<GatewayListener>(() => new GatewayListener());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GatewayListener> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GatewayListener() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GatewayListener(GatewayListener other) : this() {
      port_ = other.port_;
      name_ = other.name_;
      protocol_ = other.protocol_;
      hosts_ = other.hosts_.Clone();
      tlsConfig_ = other.tlsConfig_ != null ? other.tlsConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GatewayListener Clone() {
      return new GatewayListener(this);
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 1;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 3;
    private global::Kdeploy.Protocol protocol_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kdeploy.Protocol Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "hosts" field.</summary>
    public const int HostsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_hosts_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> hosts_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Hosts {
      get { return hosts_; }
    }

    /// <summary>Field number for the "tls_config" field.</summary>
    public const int TlsConfigFieldNumber = 5;
    private global::Kdeploy.ServerTLSSettings tlsConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kdeploy.ServerTLSSettings TlsConfig {
      get { return tlsConfig_; }
      set {
        tlsConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GatewayListener);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GatewayListener other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Port != other.Port) return false;
      if (Name != other.Name) return false;
      if (Protocol != other.Protocol) return false;
      if(!hosts_.Equals(other.hosts_)) return false;
      if (!object.Equals(TlsConfig, other.TlsConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Protocol != 0) hash ^= Protocol.GetHashCode();
      hash ^= hosts_.GetHashCode();
      if (tlsConfig_ != null) hash ^= TlsConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Port != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Port);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Protocol != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Protocol);
      }
      hosts_.WriteTo(output, _repeated_hosts_codec);
      if (tlsConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TlsConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Protocol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Protocol);
      }
      size += hosts_.CalculateSize(_repeated_hosts_codec);
      if (tlsConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TlsConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GatewayListener other) {
      if (other == null) {
        return;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Protocol != 0) {
        Protocol = other.Protocol;
      }
      hosts_.Add(other.hosts_);
      if (other.tlsConfig_ != null) {
        if (tlsConfig_ == null) {
          tlsConfig_ = new global::Kdeploy.ServerTLSSettings();
        }
        TlsConfig.MergeFrom(other.TlsConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Port = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            protocol_ = (global::Kdeploy.Protocol) input.ReadEnum();
            break;
          }
          case 34: {
            hosts_.AddEntriesFrom(input, _repeated_hosts_codec);
            break;
          }
          case 42: {
            if (tlsConfig_ == null) {
              tlsConfig_ = new global::Kdeploy.ServerTLSSettings();
            }
            input.ReadMessage(tlsConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Gateway : pb::IMessage<Gateway> {
    private static readonly pb::MessageParser<Gateway> _parser = new pb::MessageParser<Gateway>(() => new Gateway());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Gateway> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gateway() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gateway(Gateway other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      listeners_ = other.listeners_.Clone();
      labels_ = other.labels_.Clone();
      selector_ = other.selector_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gateway Clone() {
      return new Gateway(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// application namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "listeners" field.</summary>
    public const int ListenersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Kdeploy.GatewayListener> _repeated_listeners_codec
        = pb::FieldCodec.ForMessage(26, global::Kdeploy.GatewayListener.Parser);
    private readonly pbc::RepeatedField<global::Kdeploy.GatewayListener> listeners_ = new pbc::RepeatedField<global::Kdeploy.GatewayListener>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kdeploy.GatewayListener> Listeners {
      get { return listeners_; }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "selector" field.</summary>
    public const int SelectorFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_selector_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
    private readonly pbc::MapField<string, string> selector_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Selector {
      get { return selector_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Gateway);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Gateway other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if(!listeners_.Equals(other.listeners_)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!Selector.Equals(other.Selector)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      hash ^= listeners_.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= Selector.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      listeners_.WriteTo(output, _repeated_listeners_codec);
      labels_.WriteTo(output, _map_labels_codec);
      selector_.WriteTo(output, _map_selector_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      size += listeners_.CalculateSize(_repeated_listeners_codec);
      size += labels_.CalculateSize(_map_labels_codec);
      size += selector_.CalculateSize(_map_selector_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Gateway other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      listeners_.Add(other.listeners_);
      labels_.Add(other.labels_);
      selector_.Add(other.selector_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            listeners_.AddEntriesFrom(input, _repeated_listeners_codec);
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 42: {
            selector_.AddEntriesFrom(input, _map_selector_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GatewayInput : pb::IMessage<GatewayInput> {
    private static readonly pb::MessageParser<GatewayInput> _parser = new pb::MessageParser<GatewayInput>(() => new GatewayInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GatewayInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GatewayInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GatewayInput(GatewayInput other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      listeners_ = other.listeners_.Clone();
      labels_ = other.labels_.Clone();
      selector_ = other.selector_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GatewayInput Clone() {
      return new GatewayInput(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// application namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "listeners" field.</summary>
    public const int ListenersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Kdeploy.GatewayListener> _repeated_listeners_codec
        = pb::FieldCodec.ForMessage(26, global::Kdeploy.GatewayListener.Parser);
    private readonly pbc::RepeatedField<global::Kdeploy.GatewayListener> listeners_ = new pbc::RepeatedField<global::Kdeploy.GatewayListener>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kdeploy.GatewayListener> Listeners {
      get { return listeners_; }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "selector" field.</summary>
    public const int SelectorFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_selector_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
    private readonly pbc::MapField<string, string> selector_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Selector {
      get { return selector_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GatewayInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GatewayInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if(!listeners_.Equals(other.listeners_)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!Selector.Equals(other.Selector)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      hash ^= listeners_.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= Selector.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      listeners_.WriteTo(output, _repeated_listeners_codec);
      labels_.WriteTo(output, _map_labels_codec);
      selector_.WriteTo(output, _map_selector_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      size += listeners_.CalculateSize(_repeated_listeners_codec);
      size += labels_.CalculateSize(_map_labels_codec);
      size += selector_.CalculateSize(_map_selector_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GatewayInput other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      listeners_.Add(other.listeners_);
      labels_.Add(other.labels_);
      selector_.Add(other.selector_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            listeners_.AddEntriesFrom(input, _repeated_listeners_codec);
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 42: {
            selector_.AddEntriesFrom(input, _map_selector_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// HTTPRoute is a single http route(istio HttpRoute)
  /// </summary>
  public sealed partial class HTTPRoute : pb::IMessage<HTTPRoute> {
    private static readonly pb::MessageParser<HTTPRoute> _parser = new pb::MessageParser<HTTPRoute>(() => new HTTPRoute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTTPRoute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRoute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRoute(HTTPRoute other) : this() {
      name_ = other.name_;
      port_ = other.port_;
      pathPrefix_ = other.pathPrefix_;
      rewriteUri_ = other.rewriteUri_;
      allowOrigins_ = other.allowOrigins_.Clone();
      allowMethods_ = other.allowMethods_.Clone();
      allowHeaders_ = other.allowHeaders_.Clone();
      exposeHeaders_ = other.exposeHeaders_.Clone();
      allowCredentials_ = other.allowCredentials_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRoute Clone() {
      return new HTTPRoute(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "path_prefix" field.</summary>
    public const int PathPrefixFieldNumber = 3;
    private string pathPrefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathPrefix {
      get { return pathPrefix_; }
      set {
        pathPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rewrite_uri" field.</summary>
    public const int RewriteUriFieldNumber = 4;
    private string rewriteUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewriteUri {
      get { return rewriteUri_; }
      set {
        rewriteUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_origins" field.</summary>
    public const int AllowOriginsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_allowOrigins_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> allowOrigins_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of origins that are allowed to perform CORS requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowOrigins {
      get { return allowOrigins_; }
    }

    /// <summary>Field number for the "allow_methods" field.</summary>
    public const int AllowMethodsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_allowMethods_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> allowMethods_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of methods that are allowed to perform CORS requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowMethods {
      get { return allowMethods_; }
    }

    /// <summary>Field number for the "allow_headers" field.</summary>
    public const int AllowHeadersFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_allowHeaders_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> allowHeaders_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of headers that are allowed to perform CORS requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowHeaders {
      get { return allowHeaders_; }
    }

    /// <summary>Field number for the "expose_headers" field.</summary>
    public const int ExposeHeadersFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_exposeHeaders_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> exposeHeaders_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The list of origins that are allowed to perform CORS requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExposeHeaders {
      get { return exposeHeaders_; }
    }

    /// <summary>Field number for the "allow_credentials" field.</summary>
    public const int AllowCredentialsFieldNumber = 9;
    private bool allowCredentials_;
    /// <summary>
    /// adds `Access-Control-Allow-Credentials` header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowCredentials {
      get { return allowCredentials_; }
      set {
        allowCredentials_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTTPRoute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTTPRoute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Port != other.Port) return false;
      if (PathPrefix != other.PathPrefix) return false;
      if (RewriteUri != other.RewriteUri) return false;
      if(!allowOrigins_.Equals(other.allowOrigins_)) return false;
      if(!allowMethods_.Equals(other.allowMethods_)) return false;
      if(!allowHeaders_.Equals(other.allowHeaders_)) return false;
      if(!exposeHeaders_.Equals(other.exposeHeaders_)) return false;
      if (AllowCredentials != other.AllowCredentials) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (PathPrefix.Length != 0) hash ^= PathPrefix.GetHashCode();
      if (RewriteUri.Length != 0) hash ^= RewriteUri.GetHashCode();
      hash ^= allowOrigins_.GetHashCode();
      hash ^= allowMethods_.GetHashCode();
      hash ^= allowHeaders_.GetHashCode();
      hash ^= exposeHeaders_.GetHashCode();
      if (AllowCredentials != false) hash ^= AllowCredentials.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (PathPrefix.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PathPrefix);
      }
      if (RewriteUri.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RewriteUri);
      }
      allowOrigins_.WriteTo(output, _repeated_allowOrigins_codec);
      allowMethods_.WriteTo(output, _repeated_allowMethods_codec);
      allowHeaders_.WriteTo(output, _repeated_allowHeaders_codec);
      exposeHeaders_.WriteTo(output, _repeated_exposeHeaders_codec);
      if (AllowCredentials != false) {
        output.WriteRawTag(72);
        output.WriteBool(AllowCredentials);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (PathPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathPrefix);
      }
      if (RewriteUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewriteUri);
      }
      size += allowOrigins_.CalculateSize(_repeated_allowOrigins_codec);
      size += allowMethods_.CalculateSize(_repeated_allowMethods_codec);
      size += allowHeaders_.CalculateSize(_repeated_allowHeaders_codec);
      size += exposeHeaders_.CalculateSize(_repeated_exposeHeaders_codec);
      if (AllowCredentials != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTTPRoute other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.PathPrefix.Length != 0) {
        PathPrefix = other.PathPrefix;
      }
      if (other.RewriteUri.Length != 0) {
        RewriteUri = other.RewriteUri;
      }
      allowOrigins_.Add(other.allowOrigins_);
      allowMethods_.Add(other.allowMethods_);
      allowHeaders_.Add(other.allowHeaders_);
      exposeHeaders_.Add(other.exposeHeaders_);
      if (other.AllowCredentials != false) {
        AllowCredentials = other.AllowCredentials;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 26: {
            PathPrefix = input.ReadString();
            break;
          }
          case 34: {
            RewriteUri = input.ReadString();
            break;
          }
          case 42: {
            allowOrigins_.AddEntriesFrom(input, _repeated_allowOrigins_codec);
            break;
          }
          case 50: {
            allowMethods_.AddEntriesFrom(input, _repeated_allowMethods_codec);
            break;
          }
          case 58: {
            allowHeaders_.AddEntriesFrom(input, _repeated_allowHeaders_codec);
            break;
          }
          case 66: {
            exposeHeaders_.AddEntriesFrom(input, _repeated_exposeHeaders_codec);
            break;
          }
          case 72: {
            AllowCredentials = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Networking : pb::IMessage<Networking> {
    private static readonly pb::MessageParser<Networking> _parser = new pb::MessageParser<Networking>(() => new Networking());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Networking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Networking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Networking(Networking other) : this() {
      gateways_ = other.gateways_.Clone();
      hosts_ = other.hosts_.Clone();
      export_ = other.export_;
      httpRoutes_ = other.httpRoutes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Networking Clone() {
      return new Networking(this);
    }

    /// <summary>Field number for the "gateways" field.</summary>
    public const int GatewaysFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_gateways_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> gateways_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Gateways {
      get { return gateways_; }
    }

    /// <summary>Field number for the "hosts" field.</summary>
    public const int HostsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_hosts_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> hosts_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Hosts {
      get { return hosts_; }
    }

    /// <summary>Field number for the "export" field.</summary>
    public const int ExportFieldNumber = 3;
    private bool export_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Export {
      get { return export_; }
      set {
        export_ = value;
      }
    }

    /// <summary>Field number for the "http_routes" field.</summary>
    public const int HttpRoutesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Kdeploy.HTTPRoute> _repeated_httpRoutes_codec
        = pb::FieldCodec.ForMessage(34, global::Kdeploy.HTTPRoute.Parser);
    private readonly pbc::RepeatedField<global::Kdeploy.HTTPRoute> httpRoutes_ = new pbc::RepeatedField<global::Kdeploy.HTTPRoute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kdeploy.HTTPRoute> HttpRoutes {
      get { return httpRoutes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Networking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Networking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gateways_.Equals(other.gateways_)) return false;
      if(!hosts_.Equals(other.hosts_)) return false;
      if (Export != other.Export) return false;
      if(!httpRoutes_.Equals(other.httpRoutes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gateways_.GetHashCode();
      hash ^= hosts_.GetHashCode();
      if (Export != false) hash ^= Export.GetHashCode();
      hash ^= httpRoutes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gateways_.WriteTo(output, _repeated_gateways_codec);
      hosts_.WriteTo(output, _repeated_hosts_codec);
      if (Export != false) {
        output.WriteRawTag(24);
        output.WriteBool(Export);
      }
      httpRoutes_.WriteTo(output, _repeated_httpRoutes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gateways_.CalculateSize(_repeated_gateways_codec);
      size += hosts_.CalculateSize(_repeated_hosts_codec);
      if (Export != false) {
        size += 1 + 1;
      }
      size += httpRoutes_.CalculateSize(_repeated_httpRoutes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Networking other) {
      if (other == null) {
        return;
      }
      gateways_.Add(other.gateways_);
      hosts_.Add(other.hosts_);
      if (other.Export != false) {
        Export = other.Export;
      }
      httpRoutes_.Add(other.httpRoutes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gateways_.AddEntriesFrom(input, _repeated_gateways_codec);
            break;
          }
          case 18: {
            hosts_.AddEntriesFrom(input, _repeated_hosts_codec);
            break;
          }
          case 24: {
            Export = input.ReadBool();
            break;
          }
          case 34: {
            httpRoutes_.AddEntriesFrom(input, _repeated_httpRoutes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// App is a stateless application
  /// </summary>
  public sealed partial class App : pb::IMessage<App> {
    private static readonly pb::MessageParser<App> _parser = new pb::MessageParser<App>(() => new App());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<App> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public App() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public App(App other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      image_ = other.image_;
      args_ = other.args_.Clone();
      env_ = other.env_.Clone();
      ports_ = other.ports_.Clone();
      replicas_ = other.replicas_;
      labels_ = other.labels_.Clone();
      selector_ = other.selector_.Clone();
      networking_ = other.networking_ != null ? other.networking_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public App Clone() {
      return new App(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// application namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private string image_ = "";
    /// <summary>
    /// docker image of application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// args are arguments given to the docker image at startup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_env_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> env_ = new pbc::MapField<string, string>();
    /// <summary>
    /// k/v map of environmental variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Env {
      get { return env_; }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 7;
    private static readonly pbc::MapField<string, uint>.Codec _map_ports_codec
        = new pbc::MapField<string, uint>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForUInt32(16), 58);
    private readonly pbc::MapField<string, uint> ports_ = new pbc::MapField<string, uint>();
    /// <summary>
    /// k/v map of ports to expose ex: http: 80 https: 443
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, uint> Ports {
      get { return ports_; }
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 8;
    private uint replicas_;
    /// <summary>
    /// number of deployment replicas
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Replicas {
      get { return replicas_; }
      set {
        replicas_ = value;
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 9;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 74);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "selector" field.</summary>
    public const int SelectorFieldNumber = 10;
    private static readonly pbc::MapField<string, string>.Codec _map_selector_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 82);
    private readonly pbc::MapField<string, string> selector_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Selector {
      get { return selector_; }
    }

    /// <summary>Field number for the "networking" field.</summary>
    public const int NetworkingFieldNumber = 11;
    private global::Kdeploy.Networking networking_;
    /// <summary>
    /// gateway/service-mesh networking
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kdeploy.Networking Networking {
      get { return networking_; }
      set {
        networking_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 20;
    private global::Kdeploy.AppStatus status_;
    /// <summary>
    /// status tracks the state of the application during it's lifecycle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kdeploy.AppStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as App);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(App other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Image != other.Image) return false;
      if(!args_.Equals(other.args_)) return false;
      if (!Env.Equals(other.Env)) return false;
      if (!Ports.Equals(other.Ports)) return false;
      if (Replicas != other.Replicas) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!Selector.Equals(other.Selector)) return false;
      if (!object.Equals(Networking, other.Networking)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= Env.GetHashCode();
      hash ^= Ports.GetHashCode();
      if (Replicas != 0) hash ^= Replicas.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= Selector.GetHashCode();
      if (networking_ != null) hash ^= Networking.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Image);
      }
      args_.WriteTo(output, _repeated_args_codec);
      env_.WriteTo(output, _map_env_codec);
      ports_.WriteTo(output, _map_ports_codec);
      if (Replicas != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Replicas);
      }
      labels_.WriteTo(output, _map_labels_codec);
      selector_.WriteTo(output, _map_selector_codec);
      if (networking_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Networking);
      }
      if (status_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      size += env_.CalculateSize(_map_env_codec);
      size += ports_.CalculateSize(_map_ports_codec);
      if (Replicas != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Replicas);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      size += selector_.CalculateSize(_map_selector_codec);
      if (networking_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Networking);
      }
      if (status_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(App other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      args_.Add(other.args_);
      env_.Add(other.env_);
      ports_.Add(other.ports_);
      if (other.Replicas != 0) {
        Replicas = other.Replicas;
      }
      labels_.Add(other.labels_);
      selector_.Add(other.selector_);
      if (other.networking_ != null) {
        if (networking_ == null) {
          networking_ = new global::Kdeploy.Networking();
        }
        Networking.MergeFrom(other.Networking);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Kdeploy.AppStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Image = input.ReadString();
            break;
          }
          case 42: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 50: {
            env_.AddEntriesFrom(input, _map_env_codec);
            break;
          }
          case 58: {
            ports_.AddEntriesFrom(input, _map_ports_codec);
            break;
          }
          case 64: {
            Replicas = input.ReadUInt32();
            break;
          }
          case 74: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 82: {
            selector_.AddEntriesFrom(input, _map_selector_codec);
            break;
          }
          case 90: {
            if (networking_ == null) {
              networking_ = new global::Kdeploy.Networking();
            }
            input.ReadMessage(networking_);
            break;
          }
          case 162: {
            if (status_ == null) {
              status_ = new global::Kdeploy.AppStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Task is scheduled cron job
  /// </summary>
  public sealed partial class Task : pb::IMessage<Task> {
    private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task(Task other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      image_ = other.image_;
      args_ = other.args_.Clone();
      env_ = other.env_.Clone();
      schedule_ = other.schedule_;
      completions_ = other.completions_;
      labels_ = other.labels_.Clone();
      selector_ = other.selector_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task Clone() {
      return new Task(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// task namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private string image_ = "";
    /// <summary>
    /// docker image of task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// args are arguments given to docker image at startup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_env_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> env_ = new pbc::MapField<string, string>();
    /// <summary>
    /// k/v map of environmental variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Env {
      get { return env_; }
    }

    /// <summary>Field number for the "schedule" field.</summary>
    public const int ScheduleFieldNumber = 7;
    private string schedule_ = "";
    /// <summary>
    /// schedule is the cron schedule: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule {
      get { return schedule_; }
      set {
        schedule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "completions" field.</summary>
    public const int CompletionsFieldNumber = 8;
    private uint completions_;
    /// <summary>
    /// completions is the number of times to execute the task. If completions = 0, the task will run forever
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Completions {
      get { return completions_; }
      set {
        completions_ = value;
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 9;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 74);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "selector" field.</summary>
    public const int SelectorFieldNumber = 10;
    private static readonly pbc::MapField<string, string>.Codec _map_selector_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 82);
    private readonly pbc::MapField<string, string> selector_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Selector {
      get { return selector_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Image != other.Image) return false;
      if(!args_.Equals(other.args_)) return false;
      if (!Env.Equals(other.Env)) return false;
      if (Schedule != other.Schedule) return false;
      if (Completions != other.Completions) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!Selector.Equals(other.Selector)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= Env.GetHashCode();
      if (Schedule.Length != 0) hash ^= Schedule.GetHashCode();
      if (Completions != 0) hash ^= Completions.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= Selector.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Image);
      }
      args_.WriteTo(output, _repeated_args_codec);
      env_.WriteTo(output, _map_env_codec);
      if (Schedule.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Schedule);
      }
      if (Completions != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Completions);
      }
      labels_.WriteTo(output, _map_labels_codec);
      selector_.WriteTo(output, _map_selector_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      size += env_.CalculateSize(_map_env_codec);
      if (Schedule.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schedule);
      }
      if (Completions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Completions);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      size += selector_.CalculateSize(_map_selector_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      args_.Add(other.args_);
      env_.Add(other.env_);
      if (other.Schedule.Length != 0) {
        Schedule = other.Schedule;
      }
      if (other.Completions != 0) {
        Completions = other.Completions;
      }
      labels_.Add(other.labels_);
      selector_.Add(other.selector_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Image = input.ReadString();
            break;
          }
          case 42: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 50: {
            env_.AddEntriesFrom(input, _map_env_codec);
            break;
          }
          case 58: {
            Schedule = input.ReadString();
            break;
          }
          case 64: {
            Completions = input.ReadUInt32();
            break;
          }
          case 74: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 82: {
            selector_.AddEntriesFrom(input, _map_selector_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TaskInput creates/updates a task(cron job)
  /// </summary>
  public sealed partial class TaskInput : pb::IMessage<TaskInput> {
    private static readonly pb::MessageParser<TaskInput> _parser = new pb::MessageParser<TaskInput>(() => new TaskInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInput(TaskInput other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      image_ = other.image_;
      args_ = other.args_.Clone();
      env_ = other.env_.Clone();
      schedule_ = other.schedule_;
      completions_ = other.completions_;
      labels_ = other.labels_.Clone();
      selector_ = other.selector_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInput Clone() {
      return new TaskInput(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// task namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private string image_ = "";
    /// <summary>
    /// docker image of task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// args are arguments given to docker image at startup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_env_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> env_ = new pbc::MapField<string, string>();
    /// <summary>
    /// k/v map of environmental variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Env {
      get { return env_; }
    }

    /// <summary>Field number for the "schedule" field.</summary>
    public const int ScheduleFieldNumber = 7;
    private string schedule_ = "";
    /// <summary>
    /// schedule is the cron schedule: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule {
      get { return schedule_; }
      set {
        schedule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "completions" field.</summary>
    public const int CompletionsFieldNumber = 8;
    private uint completions_;
    /// <summary>
    /// completions is the number of times to execute the task. If completions = 0, the task will run forever
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Completions {
      get { return completions_; }
      set {
        completions_ = value;
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 9;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 74);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "selector" field.</summary>
    public const int SelectorFieldNumber = 10;
    private static readonly pbc::MapField<string, string>.Codec _map_selector_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 82);
    private readonly pbc::MapField<string, string> selector_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Selector {
      get { return selector_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Image != other.Image) return false;
      if(!args_.Equals(other.args_)) return false;
      if (!Env.Equals(other.Env)) return false;
      if (Schedule != other.Schedule) return false;
      if (Completions != other.Completions) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!Selector.Equals(other.Selector)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= Env.GetHashCode();
      if (Schedule.Length != 0) hash ^= Schedule.GetHashCode();
      if (Completions != 0) hash ^= Completions.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= Selector.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Image);
      }
      args_.WriteTo(output, _repeated_args_codec);
      env_.WriteTo(output, _map_env_codec);
      if (Schedule.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Schedule);
      }
      if (Completions != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Completions);
      }
      labels_.WriteTo(output, _map_labels_codec);
      selector_.WriteTo(output, _map_selector_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      size += env_.CalculateSize(_map_env_codec);
      if (Schedule.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schedule);
      }
      if (Completions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Completions);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      size += selector_.CalculateSize(_map_selector_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskInput other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      args_.Add(other.args_);
      env_.Add(other.env_);
      if (other.Schedule.Length != 0) {
        Schedule = other.Schedule;
      }
      if (other.Completions != 0) {
        Completions = other.Completions;
      }
      labels_.Add(other.labels_);
      selector_.Add(other.selector_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Image = input.ReadString();
            break;
          }
          case 42: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 50: {
            env_.AddEntriesFrom(input, _map_env_codec);
            break;
          }
          case 58: {
            Schedule = input.ReadString();
            break;
          }
          case 64: {
            Completions = input.ReadUInt32();
            break;
          }
          case 74: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 82: {
            selector_.AddEntriesFrom(input, _map_selector_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// AppInput creates/replaces an app
  /// </summary>
  public sealed partial class AppInput : pb::IMessage<AppInput> {
    private static readonly pb::MessageParser<AppInput> _parser = new pb::MessageParser<AppInput>(() => new AppInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppInput(AppInput other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      image_ = other.image_;
      args_ = other.args_.Clone();
      env_ = other.env_.Clone();
      ports_ = other.ports_.Clone();
      replicas_ = other.replicas_;
      networking_ = other.networking_ != null ? other.networking_.Clone() : null;
      labels_ = other.labels_.Clone();
      selector_ = other.selector_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppInput Clone() {
      return new AppInput(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// application namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private string image_ = "";
    /// <summary>
    /// docker image of application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// args are arguments given to the docker image at startup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_env_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
    private readonly pbc::MapField<string, string> env_ = new pbc::MapField<string, string>();
    /// <summary>
    /// k/v map of environmental variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Env {
      get { return env_; }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 6;
    private static readonly pbc::MapField<string, uint>.Codec _map_ports_codec
        = new pbc::MapField<string, uint>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForUInt32(16), 50);
    private readonly pbc::MapField<string, uint> ports_ = new pbc::MapField<string, uint>();
    /// <summary>
    /// k/v map of ports to expose ex: http: 80 https: 443
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, uint> Ports {
      get { return ports_; }
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 7;
    private uint replicas_;
    /// <summary>
    /// number of deployment replicas
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Replicas {
      get { return replicas_; }
      set {
        replicas_ = value;
      }
    }

    /// <summary>Field number for the "networking" field.</summary>
    public const int NetworkingFieldNumber = 9;
    private global::Kdeploy.Networking networking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kdeploy.Networking Networking {
      get { return networking_; }
      set {
        networking_ = value;
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 10;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 82);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "selector" field.</summary>
    public const int SelectorFieldNumber = 11;
    private static readonly pbc::MapField<string, string>.Codec _map_selector_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 90);
    private readonly pbc::MapField<string, string> selector_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Selector {
      get { return selector_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Image != other.Image) return false;
      if(!args_.Equals(other.args_)) return false;
      if (!Env.Equals(other.Env)) return false;
      if (!Ports.Equals(other.Ports)) return false;
      if (Replicas != other.Replicas) return false;
      if (!object.Equals(Networking, other.Networking)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!Selector.Equals(other.Selector)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      hash ^= args_.GetHashCode();
      hash ^= Env.GetHashCode();
      hash ^= Ports.GetHashCode();
      if (Replicas != 0) hash ^= Replicas.GetHashCode();
      if (networking_ != null) hash ^= Networking.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= Selector.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Image);
      }
      args_.WriteTo(output, _repeated_args_codec);
      env_.WriteTo(output, _map_env_codec);
      ports_.WriteTo(output, _map_ports_codec);
      if (Replicas != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Replicas);
      }
      if (networking_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Networking);
      }
      labels_.WriteTo(output, _map_labels_codec);
      selector_.WriteTo(output, _map_selector_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      size += env_.CalculateSize(_map_env_codec);
      size += ports_.CalculateSize(_map_ports_codec);
      if (Replicas != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Replicas);
      }
      if (networking_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Networking);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      size += selector_.CalculateSize(_map_selector_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppInput other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      args_.Add(other.args_);
      env_.Add(other.env_);
      ports_.Add(other.ports_);
      if (other.Replicas != 0) {
        Replicas = other.Replicas;
      }
      if (other.networking_ != null) {
        if (networking_ == null) {
          networking_ = new global::Kdeploy.Networking();
        }
        Networking.MergeFrom(other.Networking);
      }
      labels_.Add(other.labels_);
      selector_.Add(other.selector_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Image = input.ReadString();
            break;
          }
          case 34: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 42: {
            env_.AddEntriesFrom(input, _map_env_codec);
            break;
          }
          case 50: {
            ports_.AddEntriesFrom(input, _map_ports_codec);
            break;
          }
          case 56: {
            Replicas = input.ReadUInt32();
            break;
          }
          case 74: {
            if (networking_ == null) {
              networking_ = new global::Kdeploy.Networking();
            }
            input.ReadMessage(networking_);
            break;
          }
          case 82: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 90: {
            selector_.AddEntriesFrom(input, _map_selector_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ref : pb::IMessage<Ref> {
    private static readonly pb::MessageParser<Ref> _parser = new pb::MessageParser<Ref>(() => new Ref());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ref> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ref() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ref(Ref other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ref Clone() {
      return new Ref(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// application namespace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ref);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ref other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ref other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Replica : pb::IMessage<Replica> {
    private static readonly pb::MessageParser<Replica> _parser = new pb::MessageParser<Replica>(() => new Replica());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Replica> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Replica() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Replica(Replica other) : this() {
      phase_ = other.phase_;
      condition_ = other.condition_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Replica Clone() {
      return new Replica(this);
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private string phase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phase {
      get { return phase_; }
      set {
        phase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 2;
    private string condition_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Condition {
      get { return condition_; }
      set {
        condition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Replica);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Replica other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phase != other.Phase) return false;
      if (Condition != other.Condition) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phase.Length != 0) hash ^= Phase.GetHashCode();
      if (Condition.Length != 0) hash ^= Condition.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Phase);
      }
      if (Condition.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Condition);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phase);
      }
      if (Condition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Condition);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Replica other) {
      if (other == null) {
        return;
      }
      if (other.Phase.Length != 0) {
        Phase = other.Phase;
      }
      if (other.Condition.Length != 0) {
        Condition = other.Condition;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Phase = input.ReadString();
            break;
          }
          case 18: {
            Condition = input.ReadString();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppStatus : pb::IMessage<AppStatus> {
    private static readonly pb::MessageParser<AppStatus> _parser = new pb::MessageParser<AppStatus>(() => new AppStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppStatus(AppStatus other) : this() {
      replicas_ = other.replicas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppStatus Clone() {
      return new AppStatus(this);
    }

    /// <summary>Field number for the "replicas" field.</summary>
    public const int ReplicasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kdeploy.Replica> _repeated_replicas_codec
        = pb::FieldCodec.ForMessage(10, global::Kdeploy.Replica.Parser);
    private readonly pbc::RepeatedField<global::Kdeploy.Replica> replicas_ = new pbc::RepeatedField<global::Kdeploy.Replica>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kdeploy.Replica> Replicas {
      get { return replicas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!replicas_.Equals(other.replicas_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= replicas_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      replicas_.WriteTo(output, _repeated_replicas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += replicas_.CalculateSize(_repeated_replicas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppStatus other) {
      if (other == null) {
        return;
      }
      replicas_.Add(other.replicas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            replicas_.AddEntriesFrom(input, _repeated_replicas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Log : pb::IMessage<Log> {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Apps : pb::IMessage<Apps> {
    private static readonly pb::MessageParser<Apps> _parser = new pb::MessageParser<Apps>(() => new Apps());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Apps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apps(Apps other) : this() {
      applications_ = other.applications_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apps Clone() {
      return new Apps(this);
    }

    /// <summary>Field number for the "applications" field.</summary>
    public const int ApplicationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kdeploy.App> _repeated_applications_codec
        = pb::FieldCodec.ForMessage(10, global::Kdeploy.App.Parser);
    private readonly pbc::RepeatedField<global::Kdeploy.App> applications_ = new pbc::RepeatedField<global::Kdeploy.App>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kdeploy.App> Applications {
      get { return applications_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Apps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Apps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!applications_.Equals(other.applications_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= applications_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      applications_.WriteTo(output, _repeated_applications_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += applications_.CalculateSize(_repeated_applications_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Apps other) {
      if (other == null) {
        return;
      }
      applications_.Add(other.applications_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            applications_.AddEntriesFrom(input, _repeated_applications_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tasks : pb::IMessage<Tasks> {
    private static readonly pb::MessageParser<Tasks> _parser = new pb::MessageParser<Tasks>(() => new Tasks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tasks(Tasks other) : this() {
      tasks_ = other.tasks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tasks Clone() {
      return new Tasks(this);
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int Tasks_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Kdeploy.Task> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(10, global::Kdeploy.Task.Parser);
    private readonly pbc::RepeatedField<global::Kdeploy.Task> tasks_ = new pbc::RepeatedField<global::Kdeploy.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Kdeploy.Task> Tasks_ {
      get { return tasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tasks_.Equals(other.tasks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tasks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tasks_.WriteTo(output, _repeated_tasks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tasks other) {
      if (other == null) {
        return;
      }
      tasks_.Add(other.tasks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Namespace : pb::IMessage<Namespace> {
    private static readonly pb::MessageParser<Namespace> _parser = new pb::MessageParser<Namespace>(() => new Namespace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Namespace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespace(Namespace other) : this() {
      namespace_ = other.namespace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespace Clone() {
      return new Namespace(this);
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int Namespace_FieldNumber = 1;
    private string namespace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace_ {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Namespace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Namespace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Namespace_ != other.Namespace_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Namespace_.Length != 0) hash ^= Namespace_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Namespace_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Namespace_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Namespace_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Namespace other) {
      if (other == null) {
        return;
      }
      if (other.Namespace_.Length != 0) {
        Namespace_ = other.Namespace_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Namespace_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Namespaces : pb::IMessage<Namespaces> {
    private static readonly pb::MessageParser<Namespaces> _parser = new pb::MessageParser<Namespaces>(() => new Namespaces());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Namespaces> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kdeploy.KdeployReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespaces() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespaces(Namespaces other) : this() {
      namespaces_ = other.namespaces_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Namespaces Clone() {
      return new Namespaces(this);
    }

    /// <summary>Field number for the "namespaces" field.</summary>
    public const int Namespaces_FieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_namespaces_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> namespaces_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Namespaces_ {
      get { return namespaces_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Namespaces);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Namespaces other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!namespaces_.Equals(other.namespaces_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= namespaces_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      namespaces_.WriteTo(output, _repeated_namespaces_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += namespaces_.CalculateSize(_repeated_namespaces_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Namespaces other) {
      if (other == null) {
        return;
      }
      namespaces_.Add(other.namespaces_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            namespaces_.AddEntriesFrom(input, _repeated_namespaces_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
