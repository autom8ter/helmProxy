<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: schema.proto

namespace Meshpaas;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * LogOpts holds options for fetching logs from Tasks & Applications
 *
 * Generated from protobuf message <code>meshpaas.LogOpts</code>
 */
class LogOpts extends \Google\Protobuf\Internal\Message
{
    /**
     * name is the name of the Application or Task
     *
     * Generated from protobuf field <code>string name = 1 [(.validator.field) = {</code>
     */
    private $name = '';
    /**
     * container is the container to stream from
     *
     * Generated from protobuf field <code>string container = 2 [(.validator.field) = {</code>
     */
    private $container = '';
    /**
     * since_seconds streams since a certain unix time(in the past)
     *
     * Generated from protobuf field <code>int64 since_seconds = 3;</code>
     */
    private $since_seconds = 0;
    /**
     * the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or since_seconds
     *
     * Generated from protobuf field <code>int64 tail_lines = 4;</code>
     */
    private $tail_lines = 0;
    /**
     * previous retrieves logs from the previous container than the one running(useful for restarts)
     *
     * Generated from protobuf field <code>bool previous = 10;</code>
     */
    private $previous = false;
    /**
     * if stream is true, the tcp connection will be left open & logs will continue to be sent to the client
     *
     * Generated from protobuf field <code>bool stream = 11;</code>
     */
    private $stream = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           name is the name of the Application or Task
     *     @type string $container
     *           container is the container to stream from
     *     @type int|string $since_seconds
     *           since_seconds streams since a certain unix time(in the past)
     *     @type int|string $tail_lines
     *           the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or since_seconds
     *     @type bool $previous
     *           previous retrieves logs from the previous container than the one running(useful for restarts)
     *     @type bool $stream
     *           if stream is true, the tcp connection will be left open & logs will continue to be sent to the client
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Schema::initOnce();
        parent::__construct($data);
    }

    /**
     * name is the name of the Application or Task
     *
     * Generated from protobuf field <code>string name = 1 [(.validator.field) = {</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * name is the name of the Application or Task
     *
     * Generated from protobuf field <code>string name = 1 [(.validator.field) = {</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * container is the container to stream from
     *
     * Generated from protobuf field <code>string container = 2 [(.validator.field) = {</code>
     * @return string
     */
    public function getContainer()
    {
        return $this->container;
    }

    /**
     * container is the container to stream from
     *
     * Generated from protobuf field <code>string container = 2 [(.validator.field) = {</code>
     * @param string $var
     * @return $this
     */
    public function setContainer($var)
    {
        GPBUtil::checkString($var, True);
        $this->container = $var;

        return $this;
    }

    /**
     * since_seconds streams since a certain unix time(in the past)
     *
     * Generated from protobuf field <code>int64 since_seconds = 3;</code>
     * @return int|string
     */
    public function getSinceSeconds()
    {
        return $this->since_seconds;
    }

    /**
     * since_seconds streams since a certain unix time(in the past)
     *
     * Generated from protobuf field <code>int64 since_seconds = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setSinceSeconds($var)
    {
        GPBUtil::checkInt64($var);
        $this->since_seconds = $var;

        return $this;
    }

    /**
     * the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or since_seconds
     *
     * Generated from protobuf field <code>int64 tail_lines = 4;</code>
     * @return int|string
     */
    public function getTailLines()
    {
        return $this->tail_lines;
    }

    /**
     * the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or since_seconds
     *
     * Generated from protobuf field <code>int64 tail_lines = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTailLines($var)
    {
        GPBUtil::checkInt64($var);
        $this->tail_lines = $var;

        return $this;
    }

    /**
     * previous retrieves logs from the previous container than the one running(useful for restarts)
     *
     * Generated from protobuf field <code>bool previous = 10;</code>
     * @return bool
     */
    public function getPrevious()
    {
        return $this->previous;
    }

    /**
     * previous retrieves logs from the previous container than the one running(useful for restarts)
     *
     * Generated from protobuf field <code>bool previous = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setPrevious($var)
    {
        GPBUtil::checkBool($var);
        $this->previous = $var;

        return $this;
    }

    /**
     * if stream is true, the tcp connection will be left open & logs will continue to be sent to the client
     *
     * Generated from protobuf field <code>bool stream = 11;</code>
     * @return bool
     */
    public function getStream()
    {
        return $this->stream;
    }

    /**
     * if stream is true, the tcp connection will be left open & logs will continue to be sent to the client
     *
     * Generated from protobuf field <code>bool stream = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setStream($var)
    {
        GPBUtil::checkBool($var);
        $this->stream = $var;

        return $this;
    }

}

