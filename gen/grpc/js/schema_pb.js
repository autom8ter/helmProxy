/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var github_com_mwitkow_go$proto$validators_validator_pb = require('./github.com/mwitkow/go-proto-validators/validator_pb.js');
goog.exportSymbol('proto.meshpaas.API', null, global);
goog.exportSymbol('proto.meshpaas.APIInput', null, global);
goog.exportSymbol('proto.meshpaas.APIStatus', null, global);
goog.exportSymbol('proto.meshpaas.APIs', null, global);
goog.exportSymbol('proto.meshpaas.Authn', null, global);
goog.exportSymbol('proto.meshpaas.AuthnRule', null, global);
goog.exportSymbol('proto.meshpaas.Container', null, global);
goog.exportSymbol('proto.meshpaas.ContainerPort', null, global);
goog.exportSymbol('proto.meshpaas.Gateway', null, global);
goog.exportSymbol('proto.meshpaas.GatewayInput', null, global);
goog.exportSymbol('proto.meshpaas.GatewayListener', null, global);
goog.exportSymbol('proto.meshpaas.Gateways', null, global);
goog.exportSymbol('proto.meshpaas.HTTPRoute', null, global);
goog.exportSymbol('proto.meshpaas.Log', null, global);
goog.exportSymbol('proto.meshpaas.LogOpts', null, global);
goog.exportSymbol('proto.meshpaas.Ref', null, global);
goog.exportSymbol('proto.meshpaas.Replica', null, global);
goog.exportSymbol('proto.meshpaas.Routing', null, global);
goog.exportSymbol('proto.meshpaas.Secret', null, global);
goog.exportSymbol('proto.meshpaas.SecretInput', null, global);
goog.exportSymbol('proto.meshpaas.SecretType', null, global);
goog.exportSymbol('proto.meshpaas.Secrets', null, global);
goog.exportSymbol('proto.meshpaas.ServerTLSSettings', null, global);
goog.exportSymbol('proto.meshpaas.TLSmode', null, global);
goog.exportSymbol('proto.meshpaas.Task', null, global);
goog.exportSymbol('proto.meshpaas.TaskInput', null, global);
goog.exportSymbol('proto.meshpaas.Tasks', null, global);
goog.exportSymbol('proto.meshpaas.TransportProtocol', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.AuthnRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.AuthnRule.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.AuthnRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.AuthnRule.displayName = 'proto.meshpaas.AuthnRule';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.AuthnRule.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.AuthnRule.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.AuthnRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.AuthnRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.AuthnRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwksUri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    issuer: jspb.Message.getFieldWithDefault(msg, 2, ""),
    audienceList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.AuthnRule}
 */
proto.meshpaas.AuthnRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.AuthnRule;
  return proto.meshpaas.AuthnRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.AuthnRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.AuthnRule}
 */
proto.meshpaas.AuthnRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwksUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAudience(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.AuthnRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.AuthnRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.AuthnRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.AuthnRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwksUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIssuer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAudienceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string jwks_uri = 1;
 * @return {string}
 */
proto.meshpaas.AuthnRule.prototype.getJwksUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.AuthnRule.prototype.setJwksUri = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string issuer = 2;
 * @return {string}
 */
proto.meshpaas.AuthnRule.prototype.getIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.AuthnRule.prototype.setIssuer = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string audience = 3;
 * @return {!Array<string>}
 */
proto.meshpaas.AuthnRule.prototype.getAudienceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.meshpaas.AuthnRule.prototype.setAudienceList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.AuthnRule.prototype.addAudience = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.meshpaas.AuthnRule.prototype.clearAudienceList = function() {
  this.setAudienceList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Authn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Authn.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Authn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Authn.displayName = 'proto.meshpaas.Authn';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Authn.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Authn.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Authn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Authn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Authn.toObject = function(includeInstance, msg) {
  var f, obj = {
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    proto.meshpaas.AuthnRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Authn}
 */
proto.meshpaas.Authn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Authn;
  return proto.meshpaas.Authn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Authn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Authn}
 */
proto.meshpaas.Authn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meshpaas.AuthnRule;
      reader.readMessage(value,proto.meshpaas.AuthnRule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Authn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Authn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Authn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Authn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.meshpaas.AuthnRule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AuthnRule rules = 1;
 * @return {!Array<!proto.meshpaas.AuthnRule>}
 */
proto.meshpaas.Authn.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.meshpaas.AuthnRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.AuthnRule, 1));
};


/** @param {!Array<!proto.meshpaas.AuthnRule>} value */
proto.meshpaas.Authn.prototype.setRulesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.meshpaas.AuthnRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.AuthnRule}
 */
proto.meshpaas.Authn.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.meshpaas.AuthnRule, opt_index);
};


proto.meshpaas.Authn.prototype.clearRulesList = function() {
  this.setRulesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.SecretInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meshpaas.SecretInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.SecretInput.displayName = 'proto.meshpaas.SecretInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.SecretInput.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.SecretInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.SecretInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.SecretInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    immutable: jspb.Message.getFieldWithDefault(msg, 4, false),
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.SecretInput}
 */
proto.meshpaas.SecretInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.SecretInput;
  return proto.meshpaas.SecretInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.SecretInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.SecretInput}
 */
proto.meshpaas.SecretInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.meshpaas.SecretType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setImmutable(value);
      break;
    case 5:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.SecretInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.SecretInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.SecretInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.SecretInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getImmutable();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.SecretInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.SecretInput.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SecretType type = 3;
 * @return {!proto.meshpaas.SecretType}
 */
proto.meshpaas.SecretInput.prototype.getType = function() {
  return /** @type {!proto.meshpaas.SecretType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.meshpaas.SecretType} value */
proto.meshpaas.SecretInput.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool immutable = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meshpaas.SecretInput.prototype.getImmutable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.meshpaas.SecretInput.prototype.setImmutable = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * map<string, string> data = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.SecretInput.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.meshpaas.SecretInput.prototype.clearDataMap = function() {
  this.getDataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Secret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meshpaas.Secret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Secret.displayName = 'proto.meshpaas.Secret';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Secret.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Secret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Secret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Secret.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    immutable: jspb.Message.getFieldWithDefault(msg, 4, false),
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Secret}
 */
proto.meshpaas.Secret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Secret;
  return proto.meshpaas.Secret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Secret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Secret}
 */
proto.meshpaas.Secret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.meshpaas.SecretType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setImmutable(value);
      break;
    case 5:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Secret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Secret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Secret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Secret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getImmutable();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.Secret.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Secret.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SecretType type = 3;
 * @return {!proto.meshpaas.SecretType}
 */
proto.meshpaas.Secret.prototype.getType = function() {
  return /** @type {!proto.meshpaas.SecretType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.meshpaas.SecretType} value */
proto.meshpaas.Secret.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool immutable = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meshpaas.Secret.prototype.getImmutable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.meshpaas.Secret.prototype.setImmutable = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * map<string, string> data = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.Secret.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.meshpaas.Secret.prototype.clearDataMap = function() {
  this.getDataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Secrets = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Secrets.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Secrets, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Secrets.displayName = 'proto.meshpaas.Secrets';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Secrets.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Secrets.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Secrets.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Secrets} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Secrets.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretsList: jspb.Message.toObjectList(msg.getSecretsList(),
    proto.meshpaas.Secret.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Secrets}
 */
proto.meshpaas.Secrets.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Secrets;
  return proto.meshpaas.Secrets.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Secrets} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Secrets}
 */
proto.meshpaas.Secrets.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meshpaas.Secret;
      reader.readMessage(value,proto.meshpaas.Secret.deserializeBinaryFromReader);
      msg.addSecrets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Secrets.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Secrets.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Secrets} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Secrets.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.meshpaas.Secret.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Secret secrets = 1;
 * @return {!Array<!proto.meshpaas.Secret>}
 */
proto.meshpaas.Secrets.prototype.getSecretsList = function() {
  return /** @type{!Array<!proto.meshpaas.Secret>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.Secret, 1));
};


/** @param {!Array<!proto.meshpaas.Secret>} value */
proto.meshpaas.Secrets.prototype.setSecretsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.meshpaas.Secret=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.Secret}
 */
proto.meshpaas.Secrets.prototype.addSecrets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.meshpaas.Secret, opt_index);
};


proto.meshpaas.Secrets.prototype.clearSecretsList = function() {
  this.setSecretsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.ServerTLSSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.ServerTLSSettings.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.ServerTLSSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.ServerTLSSettings.displayName = 'proto.meshpaas.ServerTLSSettings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.ServerTLSSettings.repeatedFields_ = [4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.ServerTLSSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.ServerTLSSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.ServerTLSSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.ServerTLSSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    httpsRedirect: jspb.Message.getFieldWithDefault(msg, 1, false),
    mode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    secretName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subjectAltNamesList: jspb.Message.getRepeatedField(msg, 4),
    verifyCertificateSpkiList: jspb.Message.getRepeatedField(msg, 5),
    verifyCertificateHashList: jspb.Message.getRepeatedField(msg, 6),
    cipherSuitesList: jspb.Message.getRepeatedField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.ServerTLSSettings}
 */
proto.meshpaas.ServerTLSSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.ServerTLSSettings;
  return proto.meshpaas.ServerTLSSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.ServerTLSSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.ServerTLSSettings}
 */
proto.meshpaas.ServerTLSSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHttpsRedirect(value);
      break;
    case 2:
      var value = /** @type {!proto.meshpaas.TLSmode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addSubjectAltNames(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addVerifyCertificateSpki(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addVerifyCertificateHash(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addCipherSuites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.ServerTLSSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.ServerTLSSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.ServerTLSSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.ServerTLSSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHttpsRedirect();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSecretName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubjectAltNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getVerifyCertificateSpkiList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getVerifyCertificateHashList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getCipherSuitesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional bool https_redirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meshpaas.ServerTLSSettings.prototype.getHttpsRedirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.meshpaas.ServerTLSSettings.prototype.setHttpsRedirect = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional TLSmode mode = 2;
 * @return {!proto.meshpaas.TLSmode}
 */
proto.meshpaas.ServerTLSSettings.prototype.getMode = function() {
  return /** @type {!proto.meshpaas.TLSmode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.meshpaas.TLSmode} value */
proto.meshpaas.ServerTLSSettings.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string secret_name = 3;
 * @return {string}
 */
proto.meshpaas.ServerTLSSettings.prototype.getSecretName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.ServerTLSSettings.prototype.setSecretName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string subject_alt_names = 4;
 * @return {!Array<string>}
 */
proto.meshpaas.ServerTLSSettings.prototype.getSubjectAltNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.meshpaas.ServerTLSSettings.prototype.setSubjectAltNamesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.ServerTLSSettings.prototype.addSubjectAltNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.meshpaas.ServerTLSSettings.prototype.clearSubjectAltNamesList = function() {
  this.setSubjectAltNamesList([]);
};


/**
 * repeated string verify_certificate_spki = 5;
 * @return {!Array<string>}
 */
proto.meshpaas.ServerTLSSettings.prototype.getVerifyCertificateSpkiList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.meshpaas.ServerTLSSettings.prototype.setVerifyCertificateSpkiList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.ServerTLSSettings.prototype.addVerifyCertificateSpki = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.meshpaas.ServerTLSSettings.prototype.clearVerifyCertificateSpkiList = function() {
  this.setVerifyCertificateSpkiList([]);
};


/**
 * repeated string verify_certificate_hash = 6;
 * @return {!Array<string>}
 */
proto.meshpaas.ServerTLSSettings.prototype.getVerifyCertificateHashList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.meshpaas.ServerTLSSettings.prototype.setVerifyCertificateHashList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.ServerTLSSettings.prototype.addVerifyCertificateHash = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.meshpaas.ServerTLSSettings.prototype.clearVerifyCertificateHashList = function() {
  this.setVerifyCertificateHashList([]);
};


/**
 * repeated string cipher_suites = 7;
 * @return {!Array<string>}
 */
proto.meshpaas.ServerTLSSettings.prototype.getCipherSuitesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.meshpaas.ServerTLSSettings.prototype.setCipherSuitesList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.ServerTLSSettings.prototype.addCipherSuites = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.meshpaas.ServerTLSSettings.prototype.clearCipherSuitesList = function() {
  this.setCipherSuitesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.GatewayListener = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.GatewayListener.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.GatewayListener, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.GatewayListener.displayName = 'proto.meshpaas.GatewayListener';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.GatewayListener.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.GatewayListener.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.GatewayListener.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.GatewayListener} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.GatewayListener.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hostsList: jspb.Message.getRepeatedField(msg, 4),
    tlsConfig: (f = msg.getTlsConfig()) && proto.meshpaas.ServerTLSSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.GatewayListener}
 */
proto.meshpaas.GatewayListener.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.GatewayListener;
  return proto.meshpaas.GatewayListener.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.GatewayListener} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.GatewayListener}
 */
proto.meshpaas.GatewayListener.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.meshpaas.TransportProtocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addHosts(value);
      break;
    case 5:
      var value = new proto.meshpaas.ServerTLSSettings;
      reader.readMessage(value,proto.meshpaas.ServerTLSSettings.deserializeBinaryFromReader);
      msg.setTlsConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.GatewayListener.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.GatewayListener.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.GatewayListener} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.GatewayListener.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getHostsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getTlsConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.meshpaas.ServerTLSSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.meshpaas.GatewayListener.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.meshpaas.GatewayListener.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.meshpaas.GatewayListener.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.GatewayListener.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TransportProtocol protocol = 3;
 * @return {!proto.meshpaas.TransportProtocol}
 */
proto.meshpaas.GatewayListener.prototype.getProtocol = function() {
  return /** @type {!proto.meshpaas.TransportProtocol} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.meshpaas.TransportProtocol} value */
proto.meshpaas.GatewayListener.prototype.setProtocol = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated string hosts = 4;
 * @return {!Array<string>}
 */
proto.meshpaas.GatewayListener.prototype.getHostsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.meshpaas.GatewayListener.prototype.setHostsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.GatewayListener.prototype.addHosts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.meshpaas.GatewayListener.prototype.clearHostsList = function() {
  this.setHostsList([]);
};


/**
 * optional ServerTLSSettings tls_config = 5;
 * @return {?proto.meshpaas.ServerTLSSettings}
 */
proto.meshpaas.GatewayListener.prototype.getTlsConfig = function() {
  return /** @type{?proto.meshpaas.ServerTLSSettings} */ (
    jspb.Message.getWrapperField(this, proto.meshpaas.ServerTLSSettings, 5));
};


/** @param {?proto.meshpaas.ServerTLSSettings|undefined} value */
proto.meshpaas.GatewayListener.prototype.setTlsConfig = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.meshpaas.GatewayListener.prototype.clearTlsConfig = function() {
  this.setTlsConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meshpaas.GatewayListener.prototype.hasTlsConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Gateway = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Gateway.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Gateway, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Gateway.displayName = 'proto.meshpaas.Gateway';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Gateway.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Gateway.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Gateway.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Gateway} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Gateway.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    listenersList: jspb.Message.toObjectList(msg.getListenersList(),
    proto.meshpaas.GatewayListener.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Gateway}
 */
proto.meshpaas.Gateway.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Gateway;
  return proto.meshpaas.Gateway.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Gateway} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Gateway}
 */
proto.meshpaas.Gateway.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.meshpaas.GatewayListener;
      reader.readMessage(value,proto.meshpaas.GatewayListener.deserializeBinaryFromReader);
      msg.addListeners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Gateway.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Gateway.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Gateway} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Gateway.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getListenersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.meshpaas.GatewayListener.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.Gateway.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Gateway.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated GatewayListener listeners = 3;
 * @return {!Array<!proto.meshpaas.GatewayListener>}
 */
proto.meshpaas.Gateway.prototype.getListenersList = function() {
  return /** @type{!Array<!proto.meshpaas.GatewayListener>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.GatewayListener, 3));
};


/** @param {!Array<!proto.meshpaas.GatewayListener>} value */
proto.meshpaas.Gateway.prototype.setListenersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.meshpaas.GatewayListener=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.GatewayListener}
 */
proto.meshpaas.Gateway.prototype.addListeners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.meshpaas.GatewayListener, opt_index);
};


proto.meshpaas.Gateway.prototype.clearListenersList = function() {
  this.setListenersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Gateways = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Gateways.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Gateways, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Gateways.displayName = 'proto.meshpaas.Gateways';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Gateways.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Gateways.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Gateways.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Gateways} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Gateways.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatwaysList: jspb.Message.toObjectList(msg.getGatwaysList(),
    proto.meshpaas.Gateway.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Gateways}
 */
proto.meshpaas.Gateways.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Gateways;
  return proto.meshpaas.Gateways.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Gateways} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Gateways}
 */
proto.meshpaas.Gateways.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meshpaas.Gateway;
      reader.readMessage(value,proto.meshpaas.Gateway.deserializeBinaryFromReader);
      msg.addGatways(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Gateways.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Gateways.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Gateways} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Gateways.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatwaysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.meshpaas.Gateway.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Gateway gatways = 1;
 * @return {!Array<!proto.meshpaas.Gateway>}
 */
proto.meshpaas.Gateways.prototype.getGatwaysList = function() {
  return /** @type{!Array<!proto.meshpaas.Gateway>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.Gateway, 1));
};


/** @param {!Array<!proto.meshpaas.Gateway>} value */
proto.meshpaas.Gateways.prototype.setGatwaysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.meshpaas.Gateway=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.Gateway}
 */
proto.meshpaas.Gateways.prototype.addGatways = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.meshpaas.Gateway, opt_index);
};


proto.meshpaas.Gateways.prototype.clearGatwaysList = function() {
  this.setGatwaysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.GatewayInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.GatewayInput.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.GatewayInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.GatewayInput.displayName = 'proto.meshpaas.GatewayInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.GatewayInput.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.GatewayInput.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.GatewayInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.GatewayInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.GatewayInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    listenersList: jspb.Message.toObjectList(msg.getListenersList(),
    proto.meshpaas.GatewayListener.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.GatewayInput}
 */
proto.meshpaas.GatewayInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.GatewayInput;
  return proto.meshpaas.GatewayInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.GatewayInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.GatewayInput}
 */
proto.meshpaas.GatewayInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.meshpaas.GatewayListener;
      reader.readMessage(value,proto.meshpaas.GatewayListener.deserializeBinaryFromReader);
      msg.addListeners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.GatewayInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.GatewayInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.GatewayInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.GatewayInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getListenersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.meshpaas.GatewayListener.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.GatewayInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.GatewayInput.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated GatewayListener listeners = 3;
 * @return {!Array<!proto.meshpaas.GatewayListener>}
 */
proto.meshpaas.GatewayInput.prototype.getListenersList = function() {
  return /** @type{!Array<!proto.meshpaas.GatewayListener>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.GatewayListener, 3));
};


/** @param {!Array<!proto.meshpaas.GatewayListener>} value */
proto.meshpaas.GatewayInput.prototype.setListenersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.meshpaas.GatewayListener=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.GatewayListener}
 */
proto.meshpaas.GatewayInput.prototype.addListeners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.meshpaas.GatewayListener, opt_index);
};


proto.meshpaas.GatewayInput.prototype.clearListenersList = function() {
  this.setListenersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.HTTPRoute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.HTTPRoute.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.HTTPRoute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.HTTPRoute.displayName = 'proto.meshpaas.HTTPRoute';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.HTTPRoute.repeatedFields_ = [6,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.HTTPRoute.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.HTTPRoute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.HTTPRoute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.HTTPRoute.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pathPrefix: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rewriteUri: jspb.Message.getFieldWithDefault(msg, 5, ""),
    allowOriginsList: jspb.Message.getRepeatedField(msg, 6),
    allowMethodsList: jspb.Message.getRepeatedField(msg, 7),
    allowHeadersList: jspb.Message.getRepeatedField(msg, 8),
    exposeHeadersList: jspb.Message.getRepeatedField(msg, 9),
    allowCredentials: jspb.Message.getFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.HTTPRoute}
 */
proto.meshpaas.HTTPRoute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.HTTPRoute;
  return proto.meshpaas.HTTPRoute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.HTTPRoute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.HTTPRoute}
 */
proto.meshpaas.HTTPRoute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathPrefix(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRewriteUri(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowOrigins(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowMethods(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowHeaders(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addExposeHeaders(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCredentials(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.HTTPRoute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.HTTPRoute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.HTTPRoute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.HTTPRoute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPathPrefix();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRewriteUri();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAllowOriginsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getAllowMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getAllowHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getExposeHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getAllowCredentials();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.HTTPRoute.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.HTTPRoute.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.meshpaas.HTTPRoute.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.meshpaas.HTTPRoute.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string path_prefix = 3;
 * @return {string}
 */
proto.meshpaas.HTTPRoute.prototype.getPathPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.HTTPRoute.prototype.setPathPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string rewrite_uri = 5;
 * @return {string}
 */
proto.meshpaas.HTTPRoute.prototype.getRewriteUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.meshpaas.HTTPRoute.prototype.setRewriteUri = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string allow_origins = 6;
 * @return {!Array<string>}
 */
proto.meshpaas.HTTPRoute.prototype.getAllowOriginsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.meshpaas.HTTPRoute.prototype.setAllowOriginsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.HTTPRoute.prototype.addAllowOrigins = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.meshpaas.HTTPRoute.prototype.clearAllowOriginsList = function() {
  this.setAllowOriginsList([]);
};


/**
 * repeated string allow_methods = 7;
 * @return {!Array<string>}
 */
proto.meshpaas.HTTPRoute.prototype.getAllowMethodsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.meshpaas.HTTPRoute.prototype.setAllowMethodsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.HTTPRoute.prototype.addAllowMethods = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.meshpaas.HTTPRoute.prototype.clearAllowMethodsList = function() {
  this.setAllowMethodsList([]);
};


/**
 * repeated string allow_headers = 8;
 * @return {!Array<string>}
 */
proto.meshpaas.HTTPRoute.prototype.getAllowHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.meshpaas.HTTPRoute.prototype.setAllowHeadersList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.HTTPRoute.prototype.addAllowHeaders = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.meshpaas.HTTPRoute.prototype.clearAllowHeadersList = function() {
  this.setAllowHeadersList([]);
};


/**
 * repeated string expose_headers = 9;
 * @return {!Array<string>}
 */
proto.meshpaas.HTTPRoute.prototype.getExposeHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array<string>} value */
proto.meshpaas.HTTPRoute.prototype.setExposeHeadersList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.HTTPRoute.prototype.addExposeHeaders = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.meshpaas.HTTPRoute.prototype.clearExposeHeadersList = function() {
  this.setExposeHeadersList([]);
};


/**
 * optional bool allow_credentials = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meshpaas.HTTPRoute.prototype.getAllowCredentials = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.meshpaas.HTTPRoute.prototype.setAllowCredentials = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Routing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Routing.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Routing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Routing.displayName = 'proto.meshpaas.Routing';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Routing.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Routing.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Routing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Routing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Routing.toObject = function(includeInstance, msg) {
  var f, obj = {
    gateway: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hostsList: jspb.Message.getRepeatedField(msg, 2),
    httpRoutesList: jspb.Message.toObjectList(msg.getHttpRoutesList(),
    proto.meshpaas.HTTPRoute.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Routing}
 */
proto.meshpaas.Routing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Routing;
  return proto.meshpaas.Routing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Routing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Routing}
 */
proto.meshpaas.Routing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateway(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addHosts(value);
      break;
    case 4:
      var value = new proto.meshpaas.HTTPRoute;
      reader.readMessage(value,proto.meshpaas.HTTPRoute.deserializeBinaryFromReader);
      msg.addHttpRoutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Routing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Routing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Routing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Routing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGateway();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHostsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getHttpRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.meshpaas.HTTPRoute.serializeBinaryToWriter
    );
  }
};


/**
 * optional string gateway = 1;
 * @return {string}
 */
proto.meshpaas.Routing.prototype.getGateway = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Routing.prototype.setGateway = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string hosts = 2;
 * @return {!Array<string>}
 */
proto.meshpaas.Routing.prototype.getHostsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.meshpaas.Routing.prototype.setHostsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.Routing.prototype.addHosts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.meshpaas.Routing.prototype.clearHostsList = function() {
  this.setHostsList([]);
};


/**
 * repeated HTTPRoute http_routes = 4;
 * @return {!Array<!proto.meshpaas.HTTPRoute>}
 */
proto.meshpaas.Routing.prototype.getHttpRoutesList = function() {
  return /** @type{!Array<!proto.meshpaas.HTTPRoute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.HTTPRoute, 4));
};


/** @param {!Array<!proto.meshpaas.HTTPRoute>} value */
proto.meshpaas.Routing.prototype.setHttpRoutesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.meshpaas.HTTPRoute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.HTTPRoute}
 */
proto.meshpaas.Routing.prototype.addHttpRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.meshpaas.HTTPRoute, opt_index);
};


proto.meshpaas.Routing.prototype.clearHttpRoutesList = function() {
  this.setHttpRoutesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Container = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Container.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Container, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Container.displayName = 'proto.meshpaas.Container';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Container.repeatedFields_ = [3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Container.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Container.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Container} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Container.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    image: jspb.Message.getFieldWithDefault(msg, 2, ""),
    argsList: jspb.Message.getRepeatedField(msg, 3),
    envMap: (f = msg.getEnvMap()) ? f.toObject(includeInstance, undefined) : [],
    portsList: jspb.Message.toObjectList(msg.getPortsList(),
    proto.meshpaas.ContainerPort.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Container}
 */
proto.meshpaas.Container.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Container;
  return proto.meshpaas.Container.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Container} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Container}
 */
proto.meshpaas.Container.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 4:
      var value = msg.getEnvMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 5:
      var value = new proto.meshpaas.ContainerPort;
      reader.readMessage(value,proto.meshpaas.ContainerPort.deserializeBinaryFromReader);
      msg.addPorts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Container.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Container.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Container} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Container.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getEnvMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getPortsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.meshpaas.ContainerPort.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.Container.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Container.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string image = 2;
 * @return {string}
 */
proto.meshpaas.Container.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.Container.prototype.setImage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string args = 3;
 * @return {!Array<string>}
 */
proto.meshpaas.Container.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.meshpaas.Container.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.Container.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.meshpaas.Container.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * map<string, string> env = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.Container.prototype.getEnvMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.meshpaas.Container.prototype.clearEnvMap = function() {
  this.getEnvMap().clear();
};


/**
 * repeated ContainerPort ports = 5;
 * @return {!Array<!proto.meshpaas.ContainerPort>}
 */
proto.meshpaas.Container.prototype.getPortsList = function() {
  return /** @type{!Array<!proto.meshpaas.ContainerPort>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.ContainerPort, 5));
};


/** @param {!Array<!proto.meshpaas.ContainerPort>} value */
proto.meshpaas.Container.prototype.setPortsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.meshpaas.ContainerPort=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.ContainerPort}
 */
proto.meshpaas.Container.prototype.addPorts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.meshpaas.ContainerPort, opt_index);
};


proto.meshpaas.Container.prototype.clearPortsList = function() {
  this.setPortsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.API = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.API.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.API, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.API.displayName = 'proto.meshpaas.API';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.API.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.API.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.API.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.API} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.API.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    containersList: jspb.Message.toObjectList(msg.getContainersList(),
    proto.meshpaas.Container.toObject, includeInstance),
    replicas: jspb.Message.getFieldWithDefault(msg, 8, 0),
    routing: (f = msg.getRouting()) && proto.meshpaas.Routing.toObject(includeInstance, f),
    authentication: (f = msg.getAuthentication()) && proto.meshpaas.Authn.toObject(includeInstance, f),
    imagePullSecret: jspb.Message.getFieldWithDefault(msg, 14, ""),
    status: (f = msg.getStatus()) && proto.meshpaas.APIStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.API}
 */
proto.meshpaas.API.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.API;
  return proto.meshpaas.API.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.API} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.API}
 */
proto.meshpaas.API.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.meshpaas.Container;
      reader.readMessage(value,proto.meshpaas.Container.deserializeBinaryFromReader);
      msg.addContainers(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplicas(value);
      break;
    case 11:
      var value = new proto.meshpaas.Routing;
      reader.readMessage(value,proto.meshpaas.Routing.deserializeBinaryFromReader);
      msg.setRouting(value);
      break;
    case 12:
      var value = new proto.meshpaas.Authn;
      reader.readMessage(value,proto.meshpaas.Authn.deserializeBinaryFromReader);
      msg.setAuthentication(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagePullSecret(value);
      break;
    case 20:
      var value = new proto.meshpaas.APIStatus;
      reader.readMessage(value,proto.meshpaas.APIStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.API.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.API.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.API} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.API.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContainersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.meshpaas.Container.serializeBinaryToWriter
    );
  }
  f = message.getReplicas();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getRouting();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.meshpaas.Routing.serializeBinaryToWriter
    );
  }
  f = message.getAuthentication();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.meshpaas.Authn.serializeBinaryToWriter
    );
  }
  f = message.getImagePullSecret();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.meshpaas.APIStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.API.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.API.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Container containers = 3;
 * @return {!Array<!proto.meshpaas.Container>}
 */
proto.meshpaas.API.prototype.getContainersList = function() {
  return /** @type{!Array<!proto.meshpaas.Container>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.Container, 3));
};


/** @param {!Array<!proto.meshpaas.Container>} value */
proto.meshpaas.API.prototype.setContainersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.meshpaas.Container=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.Container}
 */
proto.meshpaas.API.prototype.addContainers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.meshpaas.Container, opt_index);
};


proto.meshpaas.API.prototype.clearContainersList = function() {
  this.setContainersList([]);
};


/**
 * optional uint32 replicas = 8;
 * @return {number}
 */
proto.meshpaas.API.prototype.getReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.meshpaas.API.prototype.setReplicas = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional Routing routing = 11;
 * @return {?proto.meshpaas.Routing}
 */
proto.meshpaas.API.prototype.getRouting = function() {
  return /** @type{?proto.meshpaas.Routing} */ (
    jspb.Message.getWrapperField(this, proto.meshpaas.Routing, 11));
};


/** @param {?proto.meshpaas.Routing|undefined} value */
proto.meshpaas.API.prototype.setRouting = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.meshpaas.API.prototype.clearRouting = function() {
  this.setRouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meshpaas.API.prototype.hasRouting = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Authn authentication = 12;
 * @return {?proto.meshpaas.Authn}
 */
proto.meshpaas.API.prototype.getAuthentication = function() {
  return /** @type{?proto.meshpaas.Authn} */ (
    jspb.Message.getWrapperField(this, proto.meshpaas.Authn, 12));
};


/** @param {?proto.meshpaas.Authn|undefined} value */
proto.meshpaas.API.prototype.setAuthentication = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.meshpaas.API.prototype.clearAuthentication = function() {
  this.setAuthentication(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meshpaas.API.prototype.hasAuthentication = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string image_pull_secret = 14;
 * @return {string}
 */
proto.meshpaas.API.prototype.getImagePullSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.meshpaas.API.prototype.setImagePullSecret = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional APIStatus status = 20;
 * @return {?proto.meshpaas.APIStatus}
 */
proto.meshpaas.API.prototype.getStatus = function() {
  return /** @type{?proto.meshpaas.APIStatus} */ (
    jspb.Message.getWrapperField(this, proto.meshpaas.APIStatus, 20));
};


/** @param {?proto.meshpaas.APIStatus|undefined} value */
proto.meshpaas.API.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.meshpaas.API.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meshpaas.API.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Task.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Task.displayName = 'proto.meshpaas.Task';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Task.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    imagePullSecret: jspb.Message.getFieldWithDefault(msg, 3, ""),
    containersList: jspb.Message.toObjectList(msg.getContainersList(),
    proto.meshpaas.Container.toObject, includeInstance),
    schedule: jspb.Message.getFieldWithDefault(msg, 7, ""),
    completions: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Task}
 */
proto.meshpaas.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Task;
  return proto.meshpaas.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Task}
 */
proto.meshpaas.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagePullSecret(value);
      break;
    case 4:
      var value = new proto.meshpaas.Container;
      reader.readMessage(value,proto.meshpaas.Container.deserializeBinaryFromReader);
      msg.addContainers(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchedule(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCompletions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImagePullSecret();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContainersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.meshpaas.Container.serializeBinaryToWriter
    );
  }
  f = message.getSchedule();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCompletions();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.Task.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Task.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string image_pull_secret = 3;
 * @return {string}
 */
proto.meshpaas.Task.prototype.getImagePullSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.Task.prototype.setImagePullSecret = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Container containers = 4;
 * @return {!Array<!proto.meshpaas.Container>}
 */
proto.meshpaas.Task.prototype.getContainersList = function() {
  return /** @type{!Array<!proto.meshpaas.Container>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.Container, 4));
};


/** @param {!Array<!proto.meshpaas.Container>} value */
proto.meshpaas.Task.prototype.setContainersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.meshpaas.Container=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.Container}
 */
proto.meshpaas.Task.prototype.addContainers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.meshpaas.Container, opt_index);
};


proto.meshpaas.Task.prototype.clearContainersList = function() {
  this.setContainersList([]);
};


/**
 * optional string schedule = 7;
 * @return {string}
 */
proto.meshpaas.Task.prototype.getSchedule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.meshpaas.Task.prototype.setSchedule = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 completions = 8;
 * @return {number}
 */
proto.meshpaas.Task.prototype.getCompletions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.meshpaas.Task.prototype.setCompletions = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.TaskInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.TaskInput.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.TaskInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.TaskInput.displayName = 'proto.meshpaas.TaskInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.TaskInput.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.TaskInput.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.TaskInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.TaskInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.TaskInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    imagePullSecret: jspb.Message.getFieldWithDefault(msg, 3, ""),
    containersList: jspb.Message.toObjectList(msg.getContainersList(),
    proto.meshpaas.Container.toObject, includeInstance),
    schedule: jspb.Message.getFieldWithDefault(msg, 7, ""),
    completions: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.TaskInput}
 */
proto.meshpaas.TaskInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.TaskInput;
  return proto.meshpaas.TaskInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.TaskInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.TaskInput}
 */
proto.meshpaas.TaskInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagePullSecret(value);
      break;
    case 4:
      var value = new proto.meshpaas.Container;
      reader.readMessage(value,proto.meshpaas.Container.deserializeBinaryFromReader);
      msg.addContainers(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchedule(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCompletions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.TaskInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.TaskInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.TaskInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.TaskInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImagePullSecret();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContainersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.meshpaas.Container.serializeBinaryToWriter
    );
  }
  f = message.getSchedule();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCompletions();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.TaskInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.TaskInput.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string image_pull_secret = 3;
 * @return {string}
 */
proto.meshpaas.TaskInput.prototype.getImagePullSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.TaskInput.prototype.setImagePullSecret = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Container containers = 4;
 * @return {!Array<!proto.meshpaas.Container>}
 */
proto.meshpaas.TaskInput.prototype.getContainersList = function() {
  return /** @type{!Array<!proto.meshpaas.Container>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.Container, 4));
};


/** @param {!Array<!proto.meshpaas.Container>} value */
proto.meshpaas.TaskInput.prototype.setContainersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.meshpaas.Container=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.Container}
 */
proto.meshpaas.TaskInput.prototype.addContainers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.meshpaas.Container, opt_index);
};


proto.meshpaas.TaskInput.prototype.clearContainersList = function() {
  this.setContainersList([]);
};


/**
 * optional string schedule = 7;
 * @return {string}
 */
proto.meshpaas.TaskInput.prototype.getSchedule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.meshpaas.TaskInput.prototype.setSchedule = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 completions = 8;
 * @return {number}
 */
proto.meshpaas.TaskInput.prototype.getCompletions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.meshpaas.TaskInput.prototype.setCompletions = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.ContainerPort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meshpaas.ContainerPort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.ContainerPort.displayName = 'proto.meshpaas.ContainerPort';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.ContainerPort.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.ContainerPort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.ContainerPort} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.ContainerPort.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0),
    expose: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.ContainerPort}
 */
proto.meshpaas.ContainerPort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.ContainerPort;
  return proto.meshpaas.ContainerPort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.ContainerPort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.ContainerPort}
 */
proto.meshpaas.ContainerPort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExpose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.ContainerPort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.ContainerPort.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.ContainerPort} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.ContainerPort.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getExpose();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.ContainerPort.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.ContainerPort.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 number = 2;
 * @return {number}
 */
proto.meshpaas.ContainerPort.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.meshpaas.ContainerPort.prototype.setNumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool expose = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meshpaas.ContainerPort.prototype.getExpose = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.meshpaas.ContainerPort.prototype.setExpose = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.APIInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.APIInput.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.APIInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.APIInput.displayName = 'proto.meshpaas.APIInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.APIInput.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.APIInput.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.APIInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.APIInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.APIInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    containersList: jspb.Message.toObjectList(msg.getContainersList(),
    proto.meshpaas.Container.toObject, includeInstance),
    replicas: jspb.Message.getFieldWithDefault(msg, 7, 0),
    routing: (f = msg.getRouting()) && proto.meshpaas.Routing.toObject(includeInstance, f),
    authentication: (f = msg.getAuthentication()) && proto.meshpaas.Authn.toObject(includeInstance, f),
    imagePullSecret: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.APIInput}
 */
proto.meshpaas.APIInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.APIInput;
  return proto.meshpaas.APIInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.APIInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.APIInput}
 */
proto.meshpaas.APIInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.meshpaas.Container;
      reader.readMessage(value,proto.meshpaas.Container.deserializeBinaryFromReader);
      msg.addContainers(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplicas(value);
      break;
    case 10:
      var value = new proto.meshpaas.Routing;
      reader.readMessage(value,proto.meshpaas.Routing.deserializeBinaryFromReader);
      msg.setRouting(value);
      break;
    case 12:
      var value = new proto.meshpaas.Authn;
      reader.readMessage(value,proto.meshpaas.Authn.deserializeBinaryFromReader);
      msg.setAuthentication(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagePullSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.APIInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.APIInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.APIInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.APIInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContainersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.meshpaas.Container.serializeBinaryToWriter
    );
  }
  f = message.getReplicas();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getRouting();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.meshpaas.Routing.serializeBinaryToWriter
    );
  }
  f = message.getAuthentication();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.meshpaas.Authn.serializeBinaryToWriter
    );
  }
  f = message.getImagePullSecret();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.APIInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.APIInput.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Container containers = 3;
 * @return {!Array<!proto.meshpaas.Container>}
 */
proto.meshpaas.APIInput.prototype.getContainersList = function() {
  return /** @type{!Array<!proto.meshpaas.Container>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.Container, 3));
};


/** @param {!Array<!proto.meshpaas.Container>} value */
proto.meshpaas.APIInput.prototype.setContainersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.meshpaas.Container=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.Container}
 */
proto.meshpaas.APIInput.prototype.addContainers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.meshpaas.Container, opt_index);
};


proto.meshpaas.APIInput.prototype.clearContainersList = function() {
  this.setContainersList([]);
};


/**
 * optional uint32 replicas = 7;
 * @return {number}
 */
proto.meshpaas.APIInput.prototype.getReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.meshpaas.APIInput.prototype.setReplicas = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Routing routing = 10;
 * @return {?proto.meshpaas.Routing}
 */
proto.meshpaas.APIInput.prototype.getRouting = function() {
  return /** @type{?proto.meshpaas.Routing} */ (
    jspb.Message.getWrapperField(this, proto.meshpaas.Routing, 10));
};


/** @param {?proto.meshpaas.Routing|undefined} value */
proto.meshpaas.APIInput.prototype.setRouting = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.meshpaas.APIInput.prototype.clearRouting = function() {
  this.setRouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meshpaas.APIInput.prototype.hasRouting = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Authn authentication = 12;
 * @return {?proto.meshpaas.Authn}
 */
proto.meshpaas.APIInput.prototype.getAuthentication = function() {
  return /** @type{?proto.meshpaas.Authn} */ (
    jspb.Message.getWrapperField(this, proto.meshpaas.Authn, 12));
};


/** @param {?proto.meshpaas.Authn|undefined} value */
proto.meshpaas.APIInput.prototype.setAuthentication = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.meshpaas.APIInput.prototype.clearAuthentication = function() {
  this.setAuthentication(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meshpaas.APIInput.prototype.hasAuthentication = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string image_pull_secret = 14;
 * @return {string}
 */
proto.meshpaas.APIInput.prototype.getImagePullSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.meshpaas.APIInput.prototype.setImagePullSecret = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Ref = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meshpaas.Ref, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Ref.displayName = 'proto.meshpaas.Ref';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Ref.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Ref.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Ref} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Ref.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Ref}
 */
proto.meshpaas.Ref.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Ref;
  return proto.meshpaas.Ref.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Ref} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Ref}
 */
proto.meshpaas.Ref.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Ref.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Ref.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Ref} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Ref.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.Ref.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Ref.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Replica = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meshpaas.Replica, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Replica.displayName = 'proto.meshpaas.Replica';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Replica.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Replica.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Replica} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Replica.toObject = function(includeInstance, msg) {
  var f, obj = {
    phase: jspb.Message.getFieldWithDefault(msg, 1, ""),
    condition: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Replica}
 */
proto.meshpaas.Replica.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Replica;
  return proto.meshpaas.Replica.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Replica} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Replica}
 */
proto.meshpaas.Replica.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhase(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCondition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Replica.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Replica.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Replica} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Replica.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCondition();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string phase = 1;
 * @return {string}
 */
proto.meshpaas.Replica.prototype.getPhase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Replica.prototype.setPhase = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string condition = 2;
 * @return {string}
 */
proto.meshpaas.Replica.prototype.getCondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.Replica.prototype.setCondition = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reason = 3;
 * @return {string}
 */
proto.meshpaas.Replica.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.Replica.prototype.setReason = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.APIStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.APIStatus.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.APIStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.APIStatus.displayName = 'proto.meshpaas.APIStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.APIStatus.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.APIStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.APIStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.APIStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.APIStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicasList: jspb.Message.toObjectList(msg.getReplicasList(),
    proto.meshpaas.Replica.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.APIStatus}
 */
proto.meshpaas.APIStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.APIStatus;
  return proto.meshpaas.APIStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.APIStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.APIStatus}
 */
proto.meshpaas.APIStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meshpaas.Replica;
      reader.readMessage(value,proto.meshpaas.Replica.deserializeBinaryFromReader);
      msg.addReplicas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.APIStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.APIStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.APIStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.APIStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.meshpaas.Replica.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Replica replicas = 1;
 * @return {!Array<!proto.meshpaas.Replica>}
 */
proto.meshpaas.APIStatus.prototype.getReplicasList = function() {
  return /** @type{!Array<!proto.meshpaas.Replica>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.Replica, 1));
};


/** @param {!Array<!proto.meshpaas.Replica>} value */
proto.meshpaas.APIStatus.prototype.setReplicasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.meshpaas.Replica=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.Replica}
 */
proto.meshpaas.APIStatus.prototype.addReplicas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.meshpaas.Replica, opt_index);
};


proto.meshpaas.APIStatus.prototype.clearReplicasList = function() {
  this.setReplicasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meshpaas.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Log.displayName = 'proto.meshpaas.Log';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Log}
 */
proto.meshpaas.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Log;
  return proto.meshpaas.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Log}
 */
proto.meshpaas.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.meshpaas.Log.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Log.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.APIs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.APIs.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.APIs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.APIs.displayName = 'proto.meshpaas.APIs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.APIs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.APIs.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.APIs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.APIs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.APIs.toObject = function(includeInstance, msg) {
  var f, obj = {
    apisList: jspb.Message.toObjectList(msg.getApisList(),
    proto.meshpaas.API.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.APIs}
 */
proto.meshpaas.APIs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.APIs;
  return proto.meshpaas.APIs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.APIs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.APIs}
 */
proto.meshpaas.APIs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meshpaas.API;
      reader.readMessage(value,proto.meshpaas.API.deserializeBinaryFromReader);
      msg.addApis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.APIs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.APIs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.APIs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.APIs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApisList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.meshpaas.API.serializeBinaryToWriter
    );
  }
};


/**
 * repeated API apis = 1;
 * @return {!Array<!proto.meshpaas.API>}
 */
proto.meshpaas.APIs.prototype.getApisList = function() {
  return /** @type{!Array<!proto.meshpaas.API>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.API, 1));
};


/** @param {!Array<!proto.meshpaas.API>} value */
proto.meshpaas.APIs.prototype.setApisList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.meshpaas.API=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.API}
 */
proto.meshpaas.APIs.prototype.addApis = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.meshpaas.API, opt_index);
};


proto.meshpaas.APIs.prototype.clearApisList = function() {
  this.setApisList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Tasks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Tasks.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Tasks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Tasks.displayName = 'proto.meshpaas.Tasks';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Tasks.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Tasks.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Tasks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Tasks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Tasks.toObject = function(includeInstance, msg) {
  var f, obj = {
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.meshpaas.Task.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Tasks}
 */
proto.meshpaas.Tasks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Tasks;
  return proto.meshpaas.Tasks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Tasks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Tasks}
 */
proto.meshpaas.Tasks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meshpaas.Task;
      reader.readMessage(value,proto.meshpaas.Task.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Tasks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Tasks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Tasks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Tasks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.meshpaas.Task.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Task tasks = 1;
 * @return {!Array<!proto.meshpaas.Task>}
 */
proto.meshpaas.Tasks.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.meshpaas.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.Task, 1));
};


/** @param {!Array<!proto.meshpaas.Task>} value */
proto.meshpaas.Tasks.prototype.setTasksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.meshpaas.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.Task}
 */
proto.meshpaas.Tasks.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.meshpaas.Task, opt_index);
};


proto.meshpaas.Tasks.prototype.clearTasksList = function() {
  this.setTasksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.LogOpts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meshpaas.LogOpts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.LogOpts.displayName = 'proto.meshpaas.LogOpts';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.LogOpts.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.LogOpts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.LogOpts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.LogOpts.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    container: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sinceSeconds: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tailLines: jspb.Message.getFieldWithDefault(msg, 4, 0),
    previous: jspb.Message.getFieldWithDefault(msg, 10, false),
    stream: jspb.Message.getFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.LogOpts}
 */
proto.meshpaas.LogOpts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.LogOpts;
  return proto.meshpaas.LogOpts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.LogOpts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.LogOpts}
 */
proto.meshpaas.LogOpts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSinceSeconds(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTailLines(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrevious(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.LogOpts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.LogOpts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.LogOpts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.LogOpts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContainer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSinceSeconds();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTailLines();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPrevious();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getStream();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.LogOpts.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.LogOpts.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string container = 2;
 * @return {string}
 */
proto.meshpaas.LogOpts.prototype.getContainer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.LogOpts.prototype.setContainer = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 since_seconds = 3;
 * @return {number}
 */
proto.meshpaas.LogOpts.prototype.getSinceSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.meshpaas.LogOpts.prototype.setSinceSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 tail_lines = 4;
 * @return {number}
 */
proto.meshpaas.LogOpts.prototype.getTailLines = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.meshpaas.LogOpts.prototype.setTailLines = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool previous = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meshpaas.LogOpts.prototype.getPrevious = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.meshpaas.LogOpts.prototype.setPrevious = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool stream = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meshpaas.LogOpts.prototype.getStream = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.meshpaas.LogOpts.prototype.setStream = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * @enum {number}
 */
proto.meshpaas.SecretType = {
  OPAQUE: 0,
  TLS_CERT_KEY: 1,
  DOCKER_CONFIG: 2
};

/**
 * @enum {number}
 */
proto.meshpaas.TransportProtocol = {
  INVALID_PROTOCOL: 0,
  HTTP: 1,
  HTTPS: 2,
  GRPC: 3,
  HTTP2: 4,
  MONGO: 5,
  TCP: 6,
  TLS: 7
};

/**
 * @enum {number}
 */
proto.meshpaas.TLSmode = {
  PASSTHROUGH: 0,
  SIMPLE: 1,
  MUTUAL: 2,
  AUTO_PASSTHROUGH: 3,
  ISTIO_MUTUAL: 4
};

goog.object.extend(exports, proto.meshpaas);
