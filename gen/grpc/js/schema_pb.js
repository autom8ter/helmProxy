/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var github_com_mwitkow_go$proto$validators_validator_pb = require('./github.com/mwitkow/go-proto-validators/validator_pb.js');
goog.exportSymbol('proto.meshpaas.App', null, global);
goog.exportSymbol('proto.meshpaas.AppInput', null, global);
goog.exportSymbol('proto.meshpaas.AppStatus', null, global);
goog.exportSymbol('proto.meshpaas.Apps', null, global);
goog.exportSymbol('proto.meshpaas.Gateway', null, global);
goog.exportSymbol('proto.meshpaas.GatewayInput', null, global);
goog.exportSymbol('proto.meshpaas.GatewayListener', null, global);
goog.exportSymbol('proto.meshpaas.HTTPRoute', null, global);
goog.exportSymbol('proto.meshpaas.Log', null, global);
goog.exportSymbol('proto.meshpaas.Namespace', null, global);
goog.exportSymbol('proto.meshpaas.Namespaces', null, global);
goog.exportSymbol('proto.meshpaas.Networking', null, global);
goog.exportSymbol('proto.meshpaas.Protocol', null, global);
goog.exportSymbol('proto.meshpaas.Ref', null, global);
goog.exportSymbol('proto.meshpaas.Replica', null, global);
goog.exportSymbol('proto.meshpaas.ServerTLSSettings', null, global);
goog.exportSymbol('proto.meshpaas.TLSmode', null, global);
goog.exportSymbol('proto.meshpaas.Task', null, global);
goog.exportSymbol('proto.meshpaas.TaskInput', null, global);
goog.exportSymbol('proto.meshpaas.Tasks', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.ServerTLSSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.ServerTLSSettings.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.ServerTLSSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.ServerTLSSettings.displayName = 'proto.meshpaas.ServerTLSSettings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.ServerTLSSettings.repeatedFields_ = [6,11,12,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.ServerTLSSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.ServerTLSSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.ServerTLSSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.ServerTLSSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    httpsRedirect: jspb.Message.getFieldWithDefault(msg, 1, false),
    mode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverCertificate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    privateKey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    caCertificates: jspb.Message.getFieldWithDefault(msg, 5, ""),
    credentialName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    subjectAltNamesList: jspb.Message.getRepeatedField(msg, 6),
    verifyCertificateSpkiList: jspb.Message.getRepeatedField(msg, 11),
    verifyCertificateHashList: jspb.Message.getRepeatedField(msg, 12),
    cipherSuitesList: jspb.Message.getRepeatedField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.ServerTLSSettings}
 */
proto.meshpaas.ServerTLSSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.ServerTLSSettings;
  return proto.meshpaas.ServerTLSSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.ServerTLSSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.ServerTLSSettings}
 */
proto.meshpaas.ServerTLSSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHttpsRedirect(value);
      break;
    case 2:
      var value = /** @type {!proto.meshpaas.TLSmode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerCertificate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaCertificates(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCredentialName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addSubjectAltNames(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addVerifyCertificateSpki(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addVerifyCertificateHash(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addCipherSuites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.ServerTLSSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.ServerTLSSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.ServerTLSSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.ServerTLSSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHttpsRedirect();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getServerCertificate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrivateKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCaCertificates();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCredentialName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSubjectAltNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getVerifyCertificateSpkiList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getVerifyCertificateHashList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
  f = message.getCipherSuitesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
};


/**
 * optional bool https_redirect = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meshpaas.ServerTLSSettings.prototype.getHttpsRedirect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.meshpaas.ServerTLSSettings.prototype.setHttpsRedirect = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional TLSmode mode = 2;
 * @return {!proto.meshpaas.TLSmode}
 */
proto.meshpaas.ServerTLSSettings.prototype.getMode = function() {
  return /** @type {!proto.meshpaas.TLSmode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.meshpaas.TLSmode} value */
proto.meshpaas.ServerTLSSettings.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string server_certificate = 3;
 * @return {string}
 */
proto.meshpaas.ServerTLSSettings.prototype.getServerCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.ServerTLSSettings.prototype.setServerCertificate = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string private_key = 4;
 * @return {string}
 */
proto.meshpaas.ServerTLSSettings.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.meshpaas.ServerTLSSettings.prototype.setPrivateKey = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string ca_certificates = 5;
 * @return {string}
 */
proto.meshpaas.ServerTLSSettings.prototype.getCaCertificates = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.meshpaas.ServerTLSSettings.prototype.setCaCertificates = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string credential_name = 10;
 * @return {string}
 */
proto.meshpaas.ServerTLSSettings.prototype.getCredentialName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.meshpaas.ServerTLSSettings.prototype.setCredentialName = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * repeated string subject_alt_names = 6;
 * @return {!Array<string>}
 */
proto.meshpaas.ServerTLSSettings.prototype.getSubjectAltNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.meshpaas.ServerTLSSettings.prototype.setSubjectAltNamesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.ServerTLSSettings.prototype.addSubjectAltNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.meshpaas.ServerTLSSettings.prototype.clearSubjectAltNamesList = function() {
  this.setSubjectAltNamesList([]);
};


/**
 * repeated string verify_certificate_spki = 11;
 * @return {!Array<string>}
 */
proto.meshpaas.ServerTLSSettings.prototype.getVerifyCertificateSpkiList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array<string>} value */
proto.meshpaas.ServerTLSSettings.prototype.setVerifyCertificateSpkiList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.ServerTLSSettings.prototype.addVerifyCertificateSpki = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.meshpaas.ServerTLSSettings.prototype.clearVerifyCertificateSpkiList = function() {
  this.setVerifyCertificateSpkiList([]);
};


/**
 * repeated string verify_certificate_hash = 12;
 * @return {!Array<string>}
 */
proto.meshpaas.ServerTLSSettings.prototype.getVerifyCertificateHashList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array<string>} value */
proto.meshpaas.ServerTLSSettings.prototype.setVerifyCertificateHashList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.ServerTLSSettings.prototype.addVerifyCertificateHash = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.meshpaas.ServerTLSSettings.prototype.clearVerifyCertificateHashList = function() {
  this.setVerifyCertificateHashList([]);
};


/**
 * repeated string cipher_suites = 9;
 * @return {!Array<string>}
 */
proto.meshpaas.ServerTLSSettings.prototype.getCipherSuitesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array<string>} value */
proto.meshpaas.ServerTLSSettings.prototype.setCipherSuitesList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.ServerTLSSettings.prototype.addCipherSuites = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.meshpaas.ServerTLSSettings.prototype.clearCipherSuitesList = function() {
  this.setCipherSuitesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.GatewayListener = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.GatewayListener.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.GatewayListener, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.GatewayListener.displayName = 'proto.meshpaas.GatewayListener';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.GatewayListener.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.GatewayListener.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.GatewayListener.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.GatewayListener} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.GatewayListener.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hostsList: jspb.Message.getRepeatedField(msg, 4),
    tlsConfig: (f = msg.getTlsConfig()) && proto.meshpaas.ServerTLSSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.GatewayListener}
 */
proto.meshpaas.GatewayListener.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.GatewayListener;
  return proto.meshpaas.GatewayListener.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.GatewayListener} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.GatewayListener}
 */
proto.meshpaas.GatewayListener.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.meshpaas.Protocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addHosts(value);
      break;
    case 5:
      var value = new proto.meshpaas.ServerTLSSettings;
      reader.readMessage(value,proto.meshpaas.ServerTLSSettings.deserializeBinaryFromReader);
      msg.setTlsConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.GatewayListener.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.GatewayListener.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.GatewayListener} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.GatewayListener.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getHostsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getTlsConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.meshpaas.ServerTLSSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 port = 1;
 * @return {number}
 */
proto.meshpaas.GatewayListener.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.meshpaas.GatewayListener.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.meshpaas.GatewayListener.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.GatewayListener.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Protocol protocol = 3;
 * @return {!proto.meshpaas.Protocol}
 */
proto.meshpaas.GatewayListener.prototype.getProtocol = function() {
  return /** @type {!proto.meshpaas.Protocol} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.meshpaas.Protocol} value */
proto.meshpaas.GatewayListener.prototype.setProtocol = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated string hosts = 4;
 * @return {!Array<string>}
 */
proto.meshpaas.GatewayListener.prototype.getHostsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.meshpaas.GatewayListener.prototype.setHostsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.GatewayListener.prototype.addHosts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.meshpaas.GatewayListener.prototype.clearHostsList = function() {
  this.setHostsList([]);
};


/**
 * optional ServerTLSSettings tls_config = 5;
 * @return {?proto.meshpaas.ServerTLSSettings}
 */
proto.meshpaas.GatewayListener.prototype.getTlsConfig = function() {
  return /** @type{?proto.meshpaas.ServerTLSSettings} */ (
    jspb.Message.getWrapperField(this, proto.meshpaas.ServerTLSSettings, 5));
};


/** @param {?proto.meshpaas.ServerTLSSettings|undefined} value */
proto.meshpaas.GatewayListener.prototype.setTlsConfig = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.meshpaas.GatewayListener.prototype.clearTlsConfig = function() {
  this.setTlsConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meshpaas.GatewayListener.prototype.hasTlsConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Gateway = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Gateway.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Gateway, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Gateway.displayName = 'proto.meshpaas.Gateway';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Gateway.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Gateway.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Gateway.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Gateway} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Gateway.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    listenersList: jspb.Message.toObjectList(msg.getListenersList(),
    proto.meshpaas.GatewayListener.toObject, includeInstance),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    selectorMap: (f = msg.getSelectorMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Gateway}
 */
proto.meshpaas.Gateway.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Gateway;
  return proto.meshpaas.Gateway.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Gateway} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Gateway}
 */
proto.meshpaas.Gateway.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = new proto.meshpaas.GatewayListener;
      reader.readMessage(value,proto.meshpaas.GatewayListener.deserializeBinaryFromReader);
      msg.addListeners(value);
      break;
    case 4:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 5:
      var value = msg.getSelectorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Gateway.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Gateway.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Gateway} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Gateway.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getListenersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.meshpaas.GatewayListener.serializeBinaryToWriter
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSelectorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.Gateway.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Gateway.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.meshpaas.Gateway.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.Gateway.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated GatewayListener listeners = 3;
 * @return {!Array<!proto.meshpaas.GatewayListener>}
 */
proto.meshpaas.Gateway.prototype.getListenersList = function() {
  return /** @type{!Array<!proto.meshpaas.GatewayListener>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.GatewayListener, 3));
};


/** @param {!Array<!proto.meshpaas.GatewayListener>} value */
proto.meshpaas.Gateway.prototype.setListenersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.meshpaas.GatewayListener=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.GatewayListener}
 */
proto.meshpaas.Gateway.prototype.addListeners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.meshpaas.GatewayListener, opt_index);
};


proto.meshpaas.Gateway.prototype.clearListenersList = function() {
  this.setListenersList([]);
};


/**
 * map<string, string> labels = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.Gateway.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.meshpaas.Gateway.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * map<string, string> selector = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.Gateway.prototype.getSelectorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.meshpaas.Gateway.prototype.clearSelectorMap = function() {
  this.getSelectorMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.GatewayInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.GatewayInput.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.GatewayInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.GatewayInput.displayName = 'proto.meshpaas.GatewayInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.GatewayInput.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.GatewayInput.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.GatewayInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.GatewayInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.GatewayInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    listenersList: jspb.Message.toObjectList(msg.getListenersList(),
    proto.meshpaas.GatewayListener.toObject, includeInstance),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    selectorMap: (f = msg.getSelectorMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.GatewayInput}
 */
proto.meshpaas.GatewayInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.GatewayInput;
  return proto.meshpaas.GatewayInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.GatewayInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.GatewayInput}
 */
proto.meshpaas.GatewayInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = new proto.meshpaas.GatewayListener;
      reader.readMessage(value,proto.meshpaas.GatewayListener.deserializeBinaryFromReader);
      msg.addListeners(value);
      break;
    case 4:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 5:
      var value = msg.getSelectorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.GatewayInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.GatewayInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.GatewayInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.GatewayInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getListenersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.meshpaas.GatewayListener.serializeBinaryToWriter
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSelectorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.GatewayInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.GatewayInput.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.meshpaas.GatewayInput.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.GatewayInput.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated GatewayListener listeners = 3;
 * @return {!Array<!proto.meshpaas.GatewayListener>}
 */
proto.meshpaas.GatewayInput.prototype.getListenersList = function() {
  return /** @type{!Array<!proto.meshpaas.GatewayListener>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.GatewayListener, 3));
};


/** @param {!Array<!proto.meshpaas.GatewayListener>} value */
proto.meshpaas.GatewayInput.prototype.setListenersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.meshpaas.GatewayListener=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.GatewayListener}
 */
proto.meshpaas.GatewayInput.prototype.addListeners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.meshpaas.GatewayListener, opt_index);
};


proto.meshpaas.GatewayInput.prototype.clearListenersList = function() {
  this.setListenersList([]);
};


/**
 * map<string, string> labels = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.GatewayInput.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.meshpaas.GatewayInput.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * map<string, string> selector = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.GatewayInput.prototype.getSelectorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.meshpaas.GatewayInput.prototype.clearSelectorMap = function() {
  this.getSelectorMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.HTTPRoute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.HTTPRoute.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.HTTPRoute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.HTTPRoute.displayName = 'proto.meshpaas.HTTPRoute';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.HTTPRoute.repeatedFields_ = [5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.HTTPRoute.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.HTTPRoute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.HTTPRoute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.HTTPRoute.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pathPrefix: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rewriteUri: jspb.Message.getFieldWithDefault(msg, 4, ""),
    allowOriginsList: jspb.Message.getRepeatedField(msg, 5),
    allowMethodsList: jspb.Message.getRepeatedField(msg, 6),
    allowHeadersList: jspb.Message.getRepeatedField(msg, 7),
    exposeHeadersList: jspb.Message.getRepeatedField(msg, 8),
    allowCredentials: jspb.Message.getFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.HTTPRoute}
 */
proto.meshpaas.HTTPRoute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.HTTPRoute;
  return proto.meshpaas.HTTPRoute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.HTTPRoute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.HTTPRoute}
 */
proto.meshpaas.HTTPRoute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathPrefix(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRewriteUri(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowOrigins(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowMethods(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowHeaders(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addExposeHeaders(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowCredentials(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.HTTPRoute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.HTTPRoute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.HTTPRoute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.HTTPRoute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPathPrefix();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRewriteUri();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAllowOriginsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getAllowMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getAllowHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getExposeHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getAllowCredentials();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.HTTPRoute.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.HTTPRoute.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.meshpaas.HTTPRoute.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.meshpaas.HTTPRoute.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string path_prefix = 3;
 * @return {string}
 */
proto.meshpaas.HTTPRoute.prototype.getPathPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.HTTPRoute.prototype.setPathPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string rewrite_uri = 4;
 * @return {string}
 */
proto.meshpaas.HTTPRoute.prototype.getRewriteUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.meshpaas.HTTPRoute.prototype.setRewriteUri = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string allow_origins = 5;
 * @return {!Array<string>}
 */
proto.meshpaas.HTTPRoute.prototype.getAllowOriginsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.meshpaas.HTTPRoute.prototype.setAllowOriginsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.HTTPRoute.prototype.addAllowOrigins = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.meshpaas.HTTPRoute.prototype.clearAllowOriginsList = function() {
  this.setAllowOriginsList([]);
};


/**
 * repeated string allow_methods = 6;
 * @return {!Array<string>}
 */
proto.meshpaas.HTTPRoute.prototype.getAllowMethodsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.meshpaas.HTTPRoute.prototype.setAllowMethodsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.HTTPRoute.prototype.addAllowMethods = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.meshpaas.HTTPRoute.prototype.clearAllowMethodsList = function() {
  this.setAllowMethodsList([]);
};


/**
 * repeated string allow_headers = 7;
 * @return {!Array<string>}
 */
proto.meshpaas.HTTPRoute.prototype.getAllowHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.meshpaas.HTTPRoute.prototype.setAllowHeadersList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.HTTPRoute.prototype.addAllowHeaders = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.meshpaas.HTTPRoute.prototype.clearAllowHeadersList = function() {
  this.setAllowHeadersList([]);
};


/**
 * repeated string expose_headers = 8;
 * @return {!Array<string>}
 */
proto.meshpaas.HTTPRoute.prototype.getExposeHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.meshpaas.HTTPRoute.prototype.setExposeHeadersList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.HTTPRoute.prototype.addExposeHeaders = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.meshpaas.HTTPRoute.prototype.clearExposeHeadersList = function() {
  this.setExposeHeadersList([]);
};


/**
 * optional bool allow_credentials = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meshpaas.HTTPRoute.prototype.getAllowCredentials = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.meshpaas.HTTPRoute.prototype.setAllowCredentials = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Networking = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Networking.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Networking, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Networking.displayName = 'proto.meshpaas.Networking';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Networking.repeatedFields_ = [1,2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Networking.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Networking.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Networking} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Networking.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewaysList: jspb.Message.getRepeatedField(msg, 1),
    hostsList: jspb.Message.getRepeatedField(msg, 2),
    pb_export: jspb.Message.getFieldWithDefault(msg, 3, false),
    httpRoutesList: jspb.Message.toObjectList(msg.getHttpRoutesList(),
    proto.meshpaas.HTTPRoute.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Networking}
 */
proto.meshpaas.Networking.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Networking;
  return proto.meshpaas.Networking.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Networking} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Networking}
 */
proto.meshpaas.Networking.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addGateways(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addHosts(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExport(value);
      break;
    case 4:
      var value = new proto.meshpaas.HTTPRoute;
      reader.readMessage(value,proto.meshpaas.HTTPRoute.deserializeBinaryFromReader);
      msg.addHttpRoutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Networking.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Networking.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Networking} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Networking.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewaysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getHostsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getExport();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getHttpRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.meshpaas.HTTPRoute.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string gateways = 1;
 * @return {!Array<string>}
 */
proto.meshpaas.Networking.prototype.getGatewaysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.meshpaas.Networking.prototype.setGatewaysList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.Networking.prototype.addGateways = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.meshpaas.Networking.prototype.clearGatewaysList = function() {
  this.setGatewaysList([]);
};


/**
 * repeated string hosts = 2;
 * @return {!Array<string>}
 */
proto.meshpaas.Networking.prototype.getHostsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.meshpaas.Networking.prototype.setHostsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.Networking.prototype.addHosts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.meshpaas.Networking.prototype.clearHostsList = function() {
  this.setHostsList([]);
};


/**
 * optional bool export = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meshpaas.Networking.prototype.getExport = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.meshpaas.Networking.prototype.setExport = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated HTTPRoute http_routes = 4;
 * @return {!Array<!proto.meshpaas.HTTPRoute>}
 */
proto.meshpaas.Networking.prototype.getHttpRoutesList = function() {
  return /** @type{!Array<!proto.meshpaas.HTTPRoute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.HTTPRoute, 4));
};


/** @param {!Array<!proto.meshpaas.HTTPRoute>} value */
proto.meshpaas.Networking.prototype.setHttpRoutesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.meshpaas.HTTPRoute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.HTTPRoute}
 */
proto.meshpaas.Networking.prototype.addHttpRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.meshpaas.HTTPRoute, opt_index);
};


proto.meshpaas.Networking.prototype.clearHttpRoutesList = function() {
  this.setHttpRoutesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.App = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.App.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.App, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.App.displayName = 'proto.meshpaas.App';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.App.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.App.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.App.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.App} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.App.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    image: jspb.Message.getFieldWithDefault(msg, 3, ""),
    argsList: jspb.Message.getRepeatedField(msg, 5),
    envMap: (f = msg.getEnvMap()) ? f.toObject(includeInstance, undefined) : [],
    portsMap: (f = msg.getPortsMap()) ? f.toObject(includeInstance, undefined) : [],
    replicas: jspb.Message.getFieldWithDefault(msg, 8, 0),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    selectorMap: (f = msg.getSelectorMap()) ? f.toObject(includeInstance, undefined) : [],
    networking: (f = msg.getNetworking()) && proto.meshpaas.Networking.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.meshpaas.AppStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.App}
 */
proto.meshpaas.App.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.App;
  return proto.meshpaas.App.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.App} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.App}
 */
proto.meshpaas.App.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 6:
      var value = msg.getEnvMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 7:
      var value = msg.getPortsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "");
         });
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplicas(value);
      break;
    case 9:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 10:
      var value = msg.getSelectorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 11:
      var value = new proto.meshpaas.Networking;
      reader.readMessage(value,proto.meshpaas.Networking.deserializeBinaryFromReader);
      msg.setNetworking(value);
      break;
    case 20:
      var value = new proto.meshpaas.AppStatus;
      reader.readMessage(value,proto.meshpaas.AppStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.App.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.App.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.App} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.App.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getEnvMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getPortsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getReplicas();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSelectorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getNetworking();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.meshpaas.Networking.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.meshpaas.AppStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.App.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.App.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.meshpaas.App.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.App.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string image = 3;
 * @return {string}
 */
proto.meshpaas.App.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.App.prototype.setImage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string args = 5;
 * @return {!Array<string>}
 */
proto.meshpaas.App.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.meshpaas.App.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.App.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.meshpaas.App.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * map<string, string> env = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.App.prototype.getEnvMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.meshpaas.App.prototype.clearEnvMap = function() {
  this.getEnvMap().clear();
};


/**
 * map<string, uint32> ports = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.meshpaas.App.prototype.getPortsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


proto.meshpaas.App.prototype.clearPortsMap = function() {
  this.getPortsMap().clear();
};


/**
 * optional uint32 replicas = 8;
 * @return {number}
 */
proto.meshpaas.App.prototype.getReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.meshpaas.App.prototype.setReplicas = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * map<string, string> labels = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.App.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


proto.meshpaas.App.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * map<string, string> selector = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.App.prototype.getSelectorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


proto.meshpaas.App.prototype.clearSelectorMap = function() {
  this.getSelectorMap().clear();
};


/**
 * optional Networking networking = 11;
 * @return {?proto.meshpaas.Networking}
 */
proto.meshpaas.App.prototype.getNetworking = function() {
  return /** @type{?proto.meshpaas.Networking} */ (
    jspb.Message.getWrapperField(this, proto.meshpaas.Networking, 11));
};


/** @param {?proto.meshpaas.Networking|undefined} value */
proto.meshpaas.App.prototype.setNetworking = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.meshpaas.App.prototype.clearNetworking = function() {
  this.setNetworking(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meshpaas.App.prototype.hasNetworking = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional AppStatus status = 20;
 * @return {?proto.meshpaas.AppStatus}
 */
proto.meshpaas.App.prototype.getStatus = function() {
  return /** @type{?proto.meshpaas.AppStatus} */ (
    jspb.Message.getWrapperField(this, proto.meshpaas.AppStatus, 20));
};


/** @param {?proto.meshpaas.AppStatus|undefined} value */
proto.meshpaas.App.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.meshpaas.App.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meshpaas.App.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Task.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Task.displayName = 'proto.meshpaas.Task';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Task.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    image: jspb.Message.getFieldWithDefault(msg, 3, ""),
    argsList: jspb.Message.getRepeatedField(msg, 5),
    envMap: (f = msg.getEnvMap()) ? f.toObject(includeInstance, undefined) : [],
    schedule: jspb.Message.getFieldWithDefault(msg, 7, ""),
    completions: jspb.Message.getFieldWithDefault(msg, 8, 0),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    selectorMap: (f = msg.getSelectorMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Task}
 */
proto.meshpaas.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Task;
  return proto.meshpaas.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Task}
 */
proto.meshpaas.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 6:
      var value = msg.getEnvMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchedule(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCompletions(value);
      break;
    case 9:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 10:
      var value = msg.getSelectorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getEnvMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSchedule();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCompletions();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSelectorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.Task.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Task.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.meshpaas.Task.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.Task.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string image = 3;
 * @return {string}
 */
proto.meshpaas.Task.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.Task.prototype.setImage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string args = 5;
 * @return {!Array<string>}
 */
proto.meshpaas.Task.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.meshpaas.Task.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.Task.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.meshpaas.Task.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * map<string, string> env = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.Task.prototype.getEnvMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.meshpaas.Task.prototype.clearEnvMap = function() {
  this.getEnvMap().clear();
};


/**
 * optional string schedule = 7;
 * @return {string}
 */
proto.meshpaas.Task.prototype.getSchedule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.meshpaas.Task.prototype.setSchedule = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 completions = 8;
 * @return {number}
 */
proto.meshpaas.Task.prototype.getCompletions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.meshpaas.Task.prototype.setCompletions = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * map<string, string> labels = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.Task.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


proto.meshpaas.Task.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * map<string, string> selector = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.Task.prototype.getSelectorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


proto.meshpaas.Task.prototype.clearSelectorMap = function() {
  this.getSelectorMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.TaskInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.TaskInput.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.TaskInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.TaskInput.displayName = 'proto.meshpaas.TaskInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.TaskInput.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.TaskInput.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.TaskInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.TaskInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.TaskInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    image: jspb.Message.getFieldWithDefault(msg, 3, ""),
    argsList: jspb.Message.getRepeatedField(msg, 5),
    envMap: (f = msg.getEnvMap()) ? f.toObject(includeInstance, undefined) : [],
    schedule: jspb.Message.getFieldWithDefault(msg, 7, ""),
    completions: jspb.Message.getFieldWithDefault(msg, 8, 0),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    selectorMap: (f = msg.getSelectorMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.TaskInput}
 */
proto.meshpaas.TaskInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.TaskInput;
  return proto.meshpaas.TaskInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.TaskInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.TaskInput}
 */
proto.meshpaas.TaskInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 6:
      var value = msg.getEnvMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchedule(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCompletions(value);
      break;
    case 9:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 10:
      var value = msg.getSelectorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.TaskInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.TaskInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.TaskInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.TaskInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getEnvMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSchedule();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCompletions();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSelectorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.TaskInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.TaskInput.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.meshpaas.TaskInput.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.TaskInput.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string image = 3;
 * @return {string}
 */
proto.meshpaas.TaskInput.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.TaskInput.prototype.setImage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string args = 5;
 * @return {!Array<string>}
 */
proto.meshpaas.TaskInput.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.meshpaas.TaskInput.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.TaskInput.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.meshpaas.TaskInput.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * map<string, string> env = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.TaskInput.prototype.getEnvMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.meshpaas.TaskInput.prototype.clearEnvMap = function() {
  this.getEnvMap().clear();
};


/**
 * optional string schedule = 7;
 * @return {string}
 */
proto.meshpaas.TaskInput.prototype.getSchedule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.meshpaas.TaskInput.prototype.setSchedule = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 completions = 8;
 * @return {number}
 */
proto.meshpaas.TaskInput.prototype.getCompletions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.meshpaas.TaskInput.prototype.setCompletions = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * map<string, string> labels = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.TaskInput.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


proto.meshpaas.TaskInput.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * map<string, string> selector = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.TaskInput.prototype.getSelectorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


proto.meshpaas.TaskInput.prototype.clearSelectorMap = function() {
  this.getSelectorMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.AppInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.AppInput.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.AppInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.AppInput.displayName = 'proto.meshpaas.AppInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.AppInput.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.AppInput.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.AppInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.AppInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.AppInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    image: jspb.Message.getFieldWithDefault(msg, 3, ""),
    argsList: jspb.Message.getRepeatedField(msg, 4),
    envMap: (f = msg.getEnvMap()) ? f.toObject(includeInstance, undefined) : [],
    portsMap: (f = msg.getPortsMap()) ? f.toObject(includeInstance, undefined) : [],
    replicas: jspb.Message.getFieldWithDefault(msg, 7, 0),
    networking: (f = msg.getNetworking()) && proto.meshpaas.Networking.toObject(includeInstance, f),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    selectorMap: (f = msg.getSelectorMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.AppInput}
 */
proto.meshpaas.AppInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.AppInput;
  return proto.meshpaas.AppInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.AppInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.AppInput}
 */
proto.meshpaas.AppInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 5:
      var value = msg.getEnvMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 6:
      var value = msg.getPortsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "");
         });
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplicas(value);
      break;
    case 9:
      var value = new proto.meshpaas.Networking;
      reader.readMessage(value,proto.meshpaas.Networking.deserializeBinaryFromReader);
      msg.setNetworking(value);
      break;
    case 10:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 11:
      var value = msg.getSelectorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.AppInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.AppInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.AppInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.AppInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getEnvMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getPortsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getReplicas();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getNetworking();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.meshpaas.Networking.serializeBinaryToWriter
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSelectorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.AppInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.AppInput.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.meshpaas.AppInput.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.AppInput.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string image = 3;
 * @return {string}
 */
proto.meshpaas.AppInput.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.AppInput.prototype.setImage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string args = 4;
 * @return {!Array<string>}
 */
proto.meshpaas.AppInput.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.meshpaas.AppInput.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.AppInput.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.meshpaas.AppInput.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * map<string, string> env = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.AppInput.prototype.getEnvMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.meshpaas.AppInput.prototype.clearEnvMap = function() {
  this.getEnvMap().clear();
};


/**
 * map<string, uint32> ports = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.meshpaas.AppInput.prototype.getPortsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.meshpaas.AppInput.prototype.clearPortsMap = function() {
  this.getPortsMap().clear();
};


/**
 * optional uint32 replicas = 7;
 * @return {number}
 */
proto.meshpaas.AppInput.prototype.getReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.meshpaas.AppInput.prototype.setReplicas = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Networking networking = 9;
 * @return {?proto.meshpaas.Networking}
 */
proto.meshpaas.AppInput.prototype.getNetworking = function() {
  return /** @type{?proto.meshpaas.Networking} */ (
    jspb.Message.getWrapperField(this, proto.meshpaas.Networking, 9));
};


/** @param {?proto.meshpaas.Networking|undefined} value */
proto.meshpaas.AppInput.prototype.setNetworking = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.meshpaas.AppInput.prototype.clearNetworking = function() {
  this.setNetworking(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meshpaas.AppInput.prototype.hasNetworking = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * map<string, string> labels = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.AppInput.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


proto.meshpaas.AppInput.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * map<string, string> selector = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.meshpaas.AppInput.prototype.getSelectorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


proto.meshpaas.AppInput.prototype.clearSelectorMap = function() {
  this.getSelectorMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Ref = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meshpaas.Ref, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Ref.displayName = 'proto.meshpaas.Ref';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Ref.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Ref.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Ref} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Ref.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Ref}
 */
proto.meshpaas.Ref.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Ref;
  return proto.meshpaas.Ref.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Ref} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Ref}
 */
proto.meshpaas.Ref.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Ref.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Ref.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Ref} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Ref.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meshpaas.Ref.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Ref.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.meshpaas.Ref.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.Ref.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Replica = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meshpaas.Replica, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Replica.displayName = 'proto.meshpaas.Replica';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Replica.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Replica.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Replica} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Replica.toObject = function(includeInstance, msg) {
  var f, obj = {
    phase: jspb.Message.getFieldWithDefault(msg, 1, ""),
    condition: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Replica}
 */
proto.meshpaas.Replica.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Replica;
  return proto.meshpaas.Replica.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Replica} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Replica}
 */
proto.meshpaas.Replica.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhase(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCondition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Replica.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Replica.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Replica} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Replica.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCondition();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string phase = 1;
 * @return {string}
 */
proto.meshpaas.Replica.prototype.getPhase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Replica.prototype.setPhase = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string condition = 2;
 * @return {string}
 */
proto.meshpaas.Replica.prototype.getCondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meshpaas.Replica.prototype.setCondition = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reason = 3;
 * @return {string}
 */
proto.meshpaas.Replica.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meshpaas.Replica.prototype.setReason = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.AppStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.AppStatus.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.AppStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.AppStatus.displayName = 'proto.meshpaas.AppStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.AppStatus.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.AppStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.AppStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.AppStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.AppStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicasList: jspb.Message.toObjectList(msg.getReplicasList(),
    proto.meshpaas.Replica.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.AppStatus}
 */
proto.meshpaas.AppStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.AppStatus;
  return proto.meshpaas.AppStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.AppStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.AppStatus}
 */
proto.meshpaas.AppStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meshpaas.Replica;
      reader.readMessage(value,proto.meshpaas.Replica.deserializeBinaryFromReader);
      msg.addReplicas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.AppStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.AppStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.AppStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.AppStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.meshpaas.Replica.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Replica replicas = 1;
 * @return {!Array<!proto.meshpaas.Replica>}
 */
proto.meshpaas.AppStatus.prototype.getReplicasList = function() {
  return /** @type{!Array<!proto.meshpaas.Replica>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.Replica, 1));
};


/** @param {!Array<!proto.meshpaas.Replica>} value */
proto.meshpaas.AppStatus.prototype.setReplicasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.meshpaas.Replica=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.Replica}
 */
proto.meshpaas.AppStatus.prototype.addReplicas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.meshpaas.Replica, opt_index);
};


proto.meshpaas.AppStatus.prototype.clearReplicasList = function() {
  this.setReplicasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meshpaas.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Log.displayName = 'proto.meshpaas.Log';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Log}
 */
proto.meshpaas.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Log;
  return proto.meshpaas.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Log}
 */
proto.meshpaas.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.meshpaas.Log.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Log.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Apps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Apps.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Apps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Apps.displayName = 'proto.meshpaas.Apps';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Apps.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Apps.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Apps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Apps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Apps.toObject = function(includeInstance, msg) {
  var f, obj = {
    applicationsList: jspb.Message.toObjectList(msg.getApplicationsList(),
    proto.meshpaas.App.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Apps}
 */
proto.meshpaas.Apps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Apps;
  return proto.meshpaas.Apps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Apps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Apps}
 */
proto.meshpaas.Apps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meshpaas.App;
      reader.readMessage(value,proto.meshpaas.App.deserializeBinaryFromReader);
      msg.addApplications(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Apps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Apps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Apps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Apps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplicationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.meshpaas.App.serializeBinaryToWriter
    );
  }
};


/**
 * repeated App applications = 1;
 * @return {!Array<!proto.meshpaas.App>}
 */
proto.meshpaas.Apps.prototype.getApplicationsList = function() {
  return /** @type{!Array<!proto.meshpaas.App>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.App, 1));
};


/** @param {!Array<!proto.meshpaas.App>} value */
proto.meshpaas.Apps.prototype.setApplicationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.meshpaas.App=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.App}
 */
proto.meshpaas.Apps.prototype.addApplications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.meshpaas.App, opt_index);
};


proto.meshpaas.Apps.prototype.clearApplicationsList = function() {
  this.setApplicationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Tasks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Tasks.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Tasks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Tasks.displayName = 'proto.meshpaas.Tasks';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Tasks.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Tasks.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Tasks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Tasks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Tasks.toObject = function(includeInstance, msg) {
  var f, obj = {
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.meshpaas.Task.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Tasks}
 */
proto.meshpaas.Tasks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Tasks;
  return proto.meshpaas.Tasks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Tasks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Tasks}
 */
proto.meshpaas.Tasks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meshpaas.Task;
      reader.readMessage(value,proto.meshpaas.Task.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Tasks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Tasks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Tasks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Tasks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.meshpaas.Task.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Task tasks = 1;
 * @return {!Array<!proto.meshpaas.Task>}
 */
proto.meshpaas.Tasks.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.meshpaas.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meshpaas.Task, 1));
};


/** @param {!Array<!proto.meshpaas.Task>} value */
proto.meshpaas.Tasks.prototype.setTasksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.meshpaas.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meshpaas.Task}
 */
proto.meshpaas.Tasks.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.meshpaas.Task, opt_index);
};


proto.meshpaas.Tasks.prototype.clearTasksList = function() {
  this.setTasksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Namespace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meshpaas.Namespace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Namespace.displayName = 'proto.meshpaas.Namespace';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Namespace.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Namespace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Namespace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Namespace.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Namespace}
 */
proto.meshpaas.Namespace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Namespace;
  return proto.meshpaas.Namespace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Namespace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Namespace}
 */
proto.meshpaas.Namespace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Namespace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Namespace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Namespace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Namespace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.meshpaas.Namespace.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meshpaas.Namespace.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meshpaas.Namespaces = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meshpaas.Namespaces.repeatedFields_, null);
};
goog.inherits(proto.meshpaas.Namespaces, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meshpaas.Namespaces.displayName = 'proto.meshpaas.Namespaces';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meshpaas.Namespaces.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meshpaas.Namespaces.prototype.toObject = function(opt_includeInstance) {
  return proto.meshpaas.Namespaces.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meshpaas.Namespaces} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Namespaces.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespacesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meshpaas.Namespaces}
 */
proto.meshpaas.Namespaces.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meshpaas.Namespaces;
  return proto.meshpaas.Namespaces.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meshpaas.Namespaces} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meshpaas.Namespaces}
 */
proto.meshpaas.Namespaces.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNamespaces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meshpaas.Namespaces.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meshpaas.Namespaces.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meshpaas.Namespaces} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meshpaas.Namespaces.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespacesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string namespaces = 1;
 * @return {!Array<string>}
 */
proto.meshpaas.Namespaces.prototype.getNamespacesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.meshpaas.Namespaces.prototype.setNamespacesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meshpaas.Namespaces.prototype.addNamespaces = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.meshpaas.Namespaces.prototype.clearNamespacesList = function() {
  this.setNamespacesList([]);
};


/**
 * @enum {number}
 */
proto.meshpaas.Protocol = {
  INVALID_PROTOCOL: 0,
  HTTP: 1,
  HTTPS: 2,
  GRPC: 3,
  HTTP2: 4,
  MONGO: 5,
  TCP: 6,
  TLS: 7
};

/**
 * @enum {number}
 */
proto.meshpaas.TLSmode = {
  PASSTHROUGH: 0,
  SIMPLE: 1,
  MUTUAL: 2,
  AUTO_PASSTHROUGH: 3,
  ISTIO_MUTUAL: 4
};

goog.object.extend(exports, proto.meshpaas);
